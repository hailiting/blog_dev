(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{151:function(e,t,n){"use strict";n.r(t);var r=n(0),a=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"nodejs基础"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs基础","aria-hidden":"true"}},[e._v("#")]),e._v(" NodeJS基础")]),n("h4",{attrs:{id:"node-js的本质是一个javascript的解析器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js的本质是一个javascript的解析器","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js的本质是一个JavaScript的解析器")]),n("h4",{attrs:{id:"node-js是javascript的运行环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js是javascript的运行环境","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js是JavaScript的运行环境")]),n("h4",{attrs:{id:"node-js是服务器程序"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js是服务器程序","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js是服务器程序")]),n("h4",{attrs:{id:"node-js本身是使用v8引擎"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js本身是使用v8引擎","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js本身是使用v8引擎")]),n("h4",{attrs:{id:"node不是web服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node不是web服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" Node不是web服务器")]),n("p",[e._v("=》通过高性能的Web服务\n=》IO性能强大（IO端口，网络的请求和反馈）\n优势：")]),n("h5",{attrs:{id:"处理大流量数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#处理大流量数据","aria-hidden":"true"}},[e._v("#")]),e._v(" 处理大流量数据")]),n("h5",{attrs:{id:"适合实时交互的应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#适合实时交互的应用","aria-hidden":"true"}},[e._v("#")]),e._v(" 适合实时交互的应用")]),n("h5",{attrs:{id:"完美支持对象数据库（moddb）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#完美支持对象数据库（moddb）","aria-hidden":"true"}},[e._v("#")]),e._v(" 完美支持对象数据库（moddb）")]),n("h5",{attrs:{id:"异步处理大量并发连接"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异步处理大量并发连接","aria-hidden":"true"}},[e._v("#")]),e._v(" 异步处理大量并发连接")]),n("h6",{attrs:{id:"hello-world"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hello-world","aria-hidden":"true"}},[e._v("#")]),e._v(" Hello World!")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var http = require('http');\nhttp.createServer(function(req,res){\n  // 定义http头\n  res.writeHead(200,{'Content-Type':'text/plan'});\n\n  // 发送相应数据\n  res.end('Hello World!\\n');\n}).listen(8000);\n\n// 服务运行后输出的一行信息\nconsole.log('server is ok')\n")])])]),n("h4",{attrs:{id:"回调"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回调","aria-hidden":"true"}},[e._v("#")]),e._v(" 回调")]),n("h5",{attrs:{id:"函数调用方式分为三类：同步调用，回调，异步调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数调用方式分为三类：同步调用，回调，异步调用","aria-hidden":"true"}},[e._v("#")]),e._v(" 函数调用方式分为三类：同步调用，回调，异步调用")]),n("h5",{attrs:{id:"回调是一种双向调用模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#回调是一种双向调用模式","aria-hidden":"true"}},[e._v("#")]),e._v(" 回调是一种双向调用模式")]),n("h4",{attrs:{id:"阻塞与非阻塞"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞","aria-hidden":"true"}},[e._v("#")]),e._v(" 阻塞与非阻塞")]),n("h5",{attrs:{id:"阻塞与非阻塞关注的是程序在等待调用结果（信息，返回值）时的状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞与非阻塞关注的是程序在等待调用结果（信息，返回值）时的状态","aria-hidden":"true"}},[e._v("#")]),e._v(" 阻塞与非阻塞关注的是程序在等待调用结果（信息，返回值）时的状态")]),n("h5",{attrs:{id:"阻塞是做不完不准回来"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阻塞是做不完不准回来","aria-hidden":"true"}},[e._v("#")]),e._v(" 阻塞是做不完不准回来")]),n("h5",{attrs:{id:"非阻塞是你先做，我先看看有没有其他事情可以做，完了吗告诉我一声"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞是你先做，我先看看有没有其他事情可以做，完了吗告诉我一声","aria-hidden":"true"}},[e._v("#")]),e._v(" 非阻塞是你先做，我先看看有没有其他事情可以做，完了吗告诉我一声")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 同步调用\nvar fs = require('fs');\nvar numbers = fs.readFileSync('numbers.txt');\n// 阻塞 Sync()\nconsole.log(numbers.toString());\n\n// 非阻塞\nvar fs = require('fs');\nvar numbers = fs.readFile('numbers.txt',function(err,data){\n  // dosthing;\n  console.log(err,data)\n});\n")])])]),n("h4",{attrs:{id:"nodejs事件驱动"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs事件驱动","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs事件驱动")]),n("h5",{attrs:{id:"nodejs是单进程单线程的应用程序，通过回调实现异步调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs是单进程单线程的应用程序，通过回调实现异步调用","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs是单进程单线程的应用程序，通过回调实现异步调用")]),n("h6",{attrs:{id:"非阻塞式i-o-事件驱动io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#非阻塞式i-o-事件驱动io","aria-hidden":"true"}},[e._v("#")]),e._v(" 非阻塞式I/O 事件驱动IO")]),n("pre",[n("code",[e._v("                                        |------------\x3e|\n")])]),n("p",[e._v("引入events -> EventEmitters(事件发射器) -> events(事件队列)|  Event Loop  | -> {Event Handlers(事件处理程序)}\n| (事件循环)   |\n|<------------|")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 引入Event模块，并创建eventsEmitter对象\nvar events = require('events');\nvar eventEmitter = new events.EventEmitter();\n// 绑定事件处理函数\nvar connctHandler = function connected(){\n  console.log('connected被调用了!');\n}\n// 完成事件绑定\neventEmitter.on('connection',connctHandler);\n// 触发事件\neventEmitter.emit('connection');\nconsole.log('程序执行完毕')\n")])])]),n("h4",{attrs:{id:"node-js模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js模块化","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js模块化")]),n("h5",{attrs:{id:"模块是node-js应用程序基本组成部分，文件和模块是一一对应的，一个模块就是一个node-js文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模块是node-js应用程序基本组成部分，文件和模块是一一对应的，一个模块就是一个node-js文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块是Node.js应用程序基本组成部分，文件和模块是一一对应的，一个模块就是一个Node.js文件")]),n("h5",{attrs:{id:"node-js中存在4类模块（原生模块和3种文件模块）"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#node-js中存在4类模块（原生模块和3种文件模块）","aria-hidden":"true"}},[e._v("#")]),e._v(" Node.js中存在4类模块（原生模块和3种文件模块）")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// main.js\n// node.js默认后缀为.js\nvar hello = require('./hello');\nhello.world();\n\n// hello.js\nexports.world = function(){\n  console.log('hello world');\n}\n")])])]),n("h6",{attrs:{id:"nodejs模块的加载方式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs模块的加载方式","aria-hidden":"true"}},[e._v("#")]),e._v(" Nodejs模块的加载方式")]),n("p",[e._v("####### 从文件模块缓存中加载\n####### 从原生模块加载\n####### 从文件加载")]),n("h4",{attrs:{id:"nodejs-函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-函数","aria-hidden":"true"}},[e._v("#")]),e._v(" Nodejs 函数")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function say(word){\n  console.log(word);\n}\nfunction execute(someFunction,value){\n  someFunction(value);\n}\nexecute(say,'hello')\nexecute(function(world){console.log('this is'+world)},'aaa')\n\n// 同样功能，不同的实现方式\n// 匿名函数\nvar http = require('http');\nhttp.createServer(function(req,res){\n\tres.writeHead(200,{'Content-Type':'text/plain'});\n\tres.write('hello world');\n\tres.end()\n}).listen(8000);\n\n// 回调函数\nvar http = require('http');\nfunction onReq(req,res){\n\tres.writeHead(200,{'Content-Type':'text/plain'});\n\tres.write('asa');\n\tres.end();\n}\nhttp.createServer(onReq).listen(3000)\n")])])]),n("h4",{attrs:{id:"nodejs路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs路由","aria-hidden":"true"}},[e._v("#")]),e._v(" Nodejs路由")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//  server.js\n'use strict'\nvar http = require('http');\nvar url = require('url');\nfunction start(route){\n\tfunction onRequest(req,res){\n\t\t// url.parse(string).query \n\t\t// querystring=>post的参数\n\t\t// query =>get的参数\n\t\t// url.parse(string).pathname\n\t\tvar pathname = url.parse(req.url).pathname;\n\t\troute(pathname,res);\n\t}\n\thttp.createServer(onRequest).listen(3000);\n\t// console.log('server has started.');\n}\nexports.start = start;\n\n//   router.js\nfunction route(pathname, res) {\n    if (pathname === \"/\") {\n        res.writeHead(200, { 'Content-Type': 'text/plain' });\n        res.write('Hell World');\n        res.end();\n    }else if(pathname === '/index/data' ){\n    \tres.end('index');\n    }else{\n    \tres.end('404');\n    }\n}\nexports.route = route;\n\n\n// index.js\nvar server = require('./server');\nvar router = require('./router');\nserver.start(router.route);\n")])])]),n("h4",{attrs:{id:"nodejs-get-post-请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-get-post-请求","aria-hidden":"true"}},[e._v("#")]),e._v(" Nodejs GET/POST 请求")]),n("p",[e._v("###GET请求=》url模块里的parse")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var http = require('http');\nvar url = require('url');\nvar util = require('util');\nhttp.createServer(function(req,res){\n  res.writeHead(200,{'content-type','text/plain;charset=utf-8'});\n  // url.parse(req.url,true) => url后缀+参数   url.parse(req.url,true).query =>请求参数\n  res.end(util.inspect(url.parse(req.url,true)))\n}).listen(3000)\n")])])]),n("h6",{attrs:{id:"post"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#post","aria-hidden":"true"}},[e._v("#")]),e._v(" post")]),n("p",[e._v("######### nodejs默认不会解析请求体，需要手动来做")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 基本语法结构说明\nvar http = require('http');\nvar querystring = require('querystring');\nhttp.createServer(function(req,res){\n  // 定义一个post用于暂存请求体的信息\n  var post = '';\n  // 通过req的data事件来监听函数，每当接受到请求体的数据，就会累加到post里\n  req.on('data',function(chunk){\n    post += chunk;\n  })\n  // 在end事件触发后，通过querystring.parse将post解析为真正的POST请求格式，然后向客户端返回\n  req.on('end',function(){\n    post = querystring.parsr(post);\n    res.end(util.inspect(post));\n  })\n}).listen(3000)\n\n// ep\nvar http = require('http');\nvar querystring = require('querystring');\nvar postHTML =\n    '<html><head><meta charset=\"utf-8\"><title>菜鸟教程 Node.js 实例</title></head>' +\n    '<body>' +\n    '<form method=\"post\">' +\n    '网站名： <input name=\"name\"><br>' +\n    '网站 URL： <input name=\"url\"><br>' +\n    '<input type=\"submit\">' +\n    '</form>' +\n    '</body></html>';\nhttp.createServer(function(req, res) {\n    var body = '';\n    req.on('data', function(chunk) {\n        body += chunk;\n    })\n    req.on('end', function() {\n        body = querystring.parse(body);\n        res.writeHead(200, { 'Content-type': 'text/html;charset=utf8' });\n        res.writeHead(200, {'Content-Type': 'text/html; charset=utf8'});\n        if (body.name && body.url) {\n            // 输出提交的数据\n            res.write('网络名：' + body.name);\n            res.write('<br>');\n            res.write('网站url：' + body.url);\n        } else {\n            res.write(postHTML);\n        }\n    \tres.end();\n    })\n}).listen(3000);\n")])])]),n("h4",{attrs:{id:"nodejs全局对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs全局对象","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs全局对象")]),n("h5",{attrs:{id:"nodejs的全局变量是global-浏览器的请求变量是window"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs的全局变量是global-浏览器的请求变量是window","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs的全局变量是global,浏览器的请求变量是window")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 输出全局变量 __filename 的值（如果在模块中，返回的是模块文件的路径，如果在当前执行的脚本里，返回的是文件所在路径的绝对路径）\nconsole.log(__filename)\n\n// process  用于描述nodejs进程状态的对象 ***\n")])])]),n("h4",{attrs:{id:"nodejs文件系统"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs文件系统","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs文件系统")]),n("h5",{attrs:{id:"文件模块的方法都有异步和同步"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#文件模块的方法都有异步和同步","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件模块的方法都有异步和同步")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var fs = require('fs');\n// fs.readFile()\n// 异步读取\nfs.readFile('input.txt',function(err,data){\n  if(err){\n    return console.log(err);\n  }\n  console.log('异步读取：'+data.toString());\n})\n// 同步读取\nvar data = fs.readFileSync('input.txt');\nconsole.log('同步读取：'+ data.toString());\nconsole.log('程序执行完毕');\n\n// fs.open(path,flags[,mode],callback)   \n// path: 文件的路径   \n// flags文件打开的行为\n// mode 设置文件模式（权限），文件创建默认权限为0666（可读，可写\n// callback 回调，带有两个参数 callback(err,fd)\n// 打开文件\nvar fs = require('fs');\nconsole.log('to be open file')\nfs.open('input.txt','r+',function(err,fd){\n  if(err){\n    return console.log(err)\n  }\n  console.log('the file is opened')\n})\n\n// fs.stat(path,callback) // callback(err,stats)  stats 是 fs.Stats 对象\n// 获取文件信息\nvar fs = require('fs');\nfs.stat('input.txt',function(err,stats){\n  if(err){\n    return console.log(err);\n  }\n  console.log(stats)\n  console.log(stats.isFile());\n  console.log(stats.isDirectory());\n})\n\n// fs.writeFile(file,data[,options],callback)\n")])])]),n("h4",{attrs:{id:"nodejs-常用工具-util"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-常用工具-util","aria-hidden":"true"}},[e._v("#")]),e._v(" nodejs 常用工具 => util")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// util.inherits\nvar util = require('util');\nfunction Base(){\n  this.name = 'base';\n  this.base = 1232;\n  this.sayHello = function(){\n    console.log('hello'+this.name);\n  };\n}\nBase.prototype.showName = function(){\n  console.log(this.name);\n}\nfunction Sub(){\n  this.name = 'sub';\n}\nutil.inherits(Sub,Base);   // Sub仅仅继承了Base原型中的函数\nvar objSub = new Sub();\nobjSub.showName();\t\n// objSub.sayHello(); err  找不到构造函数里的内容\t\nvar objBase=new Base();\nobjBase.sayHello();\nobjBase.showName();\n\n// util.inspect  =>将任意东西转换成字符串\nvar util = require('util');\nfunction Person(){\n  this.name = 'sadf';\n  this.toString = function(){\n    return this.name\n  }\n}\nvar obj = new Person();\nconsole.log(util.inspect(obj));\nconsole.log(util.inspect(obj,true))\n\n// 检测数据类型 =》返回值为true or false\nutil.isArray(object);\nutil.isRegExp(object);\nutil.isDate(object);\nutil.isError(object);\n")])])])])}],!1,null,null,null);t.default=a.exports}}]);