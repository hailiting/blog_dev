(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{160:function(t,e,a){"use strict";a.r(e);var r=a(0),o=Object(r.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"从原型到原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从原型到原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 从原型到原型链")]),a("h4",{attrs:{id:"构造函数创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数创建对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 构造函数创建对象")]),a("p",[t._v("首先我们用构造函数创建一个对象")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(argument) {\n} //= fn 构造函数\nvar person = new Person() // => person 实例对象\nperson.name='nake'\nconsole.log(person.name) // nake\n")])])]),a("p",[t._v("在上面这个例子里，Person是一个构造函数，我们使用new创建一个实例对象person\n很简单吧，接下来进入正题")]),a("h4",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype","aria-hidden":"true"}},[t._v("#")]),t._v(" prototype")]),a("p",[t._v("每个函数都有一个prototype属性，就是我们经常在各种例子里看到的prototype，比如：")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(argument) {\n}\nPerson.prototype.name='nake'\nlet person01 = new Person()\nlet person02 = new Person()\nconsole.log(person01.name) // nake\nconsole.log(person02.name) // nake\n")])])]),a("p",[t._v("那这个函数的prototype属性指向的是什么呢？是这个函数的原型吗？\n其实，函数的prototype属性指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型，也就是这个例子中的person01和person02的原型\n那什么是原型呢？你可以这样理解：每个JavaScript对象（null除外）在创建的时候会关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型“继承”属性。\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1338363-1cd7ec5acf52c58e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"构造函数和实例原型中间的关系"}}),t._v("\n那么我们该怎么表示实例与实例原型，也就是person和Person.prototype之间的关系呢，这时候我们要讲到第二个属性：\n"),a("em",[t._v("proto")]),t._v("\n每一个JavaScript对象（除null）都具有一个属性，叫"),a("code",[t._v("__proto__")]),t._v("，这个属性指向该对象的原型。\n为了证明证明这一点，可以做一个小demo")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(){\n}\nlet person = new Person()\nconsole.log(person.__proto__ === Person.prototype) // => true\n")])])]),a("p",[t._v("于是我们更新下关系图：\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1338363-1674bb91b2311b0b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"关系图"}}),t._v("\n既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？")]),a("h4",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor","aria-hidden":"true"}},[t._v("#")]),t._v(" constructor")]),a("p",[t._v("指向实例倒没有，因为一个构造函数可以生成多个实例，但原型指向构造函数的倒是有，这就是第三个属性： constructor，每个原型都有一个constructor属性指向关联的构造函数。\n为了验证这一点，我们可以尝试")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(){}\nconsole.log(Person === Person.prototype.constructor)  // true\n")])])]),a("p",[t._v("当获取到person.constructor时，其实person中并没有constructor属性，当不能读取到construct属性时，会向person的原型，也就是Person.prototype去找，正好该原型中有该属性，所以：")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("person.constructor === Person.prototype.constructor\n")])])]),a("p",[t._v("所以可以更新一下关系图\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1338363-4cb05dab83282dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"关系图"}}),t._v("\n综上，我们可以得出：")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(){}\nvar person = new Person()\nconsole.log(person.__proto__ === Person.prototype) // true\nconsole.log(Person === Person.prototype.constructor) // true\n// Es5 获取对象的原型\nconsole.log(Object.getPrototypeOf(person) === Person.prototype) // true\n")])])]),a("p",[t._v("了解了构造函数、实例原型、和实例中间的关系，接下来我们讲讲实例和实例原型之间的关系")]),a("h4",{attrs:{id:"实例与原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例与原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 实例与原型")]),a("p",[t._v("当读取实例属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最底层为止。\n举个例子：")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function Person(){}\nPerson.prototype.name = 'kity'\nvar person = new Person()\nperson.name = 'hebe'\nconsole.log(person.name)  // hebe\ndelete person.name\nconsole.log(person.name) // kity\n")])])]),a("p",[t._v("那万一最上层没有找到呢？")]),a("h4",{attrs:{id:"原型的原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型的原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型的原型")]),a("p",[t._v("在上面，我们已经将了原型也是一个对象，既然时对象，那么我们就可以用最原始的方法创建它，那就是：")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var obj = new Object()\nobj.name = 'hitu'\nconsole.log(obj.name) // hitu\n")])])]),a("p",[t._v("其实原型对象就是通过Object构造函数生成的，结合之前所说，实例的"),a("code",[t._v("__proto__")]),t._v("指向构造函数的prototype，所以我们更新一下关系图：\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1338363-b164e558691a51c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"关系图"}})]),a("h4",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 原型链")]),a("p",[t._v("那Object.prototype的原型呢？")]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("console.log(Object.prototype.__proto__ === null) // true\n")])])]),a("blockquote",[a("p",[t._v("null 表示“没有对象”，即该处不应该有值")])]),a("p",[t._v("所以Object.prototype.__proto__的值为null跟Object.prototype没有原型是一样的意思。\n所以查找属性的时候，查到Object.prototype就停止查找了。\n所以最后一张关系图可更新为：\n"),a("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/1338363-4ce16552162a0c39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240",alt:"关系图"}}),t._v("\n其中，图中由相互关联的原型组成的链状结构就是原型链，也就是绿色的线。")]),a("h4",{attrs:{id:"补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充","aria-hidden":"true"}},[t._v("#")]),t._v(" 补充")]),a("h4",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto","aria-hidden":"true"}},[t._v("#")]),a("code",[t._v("__proto__")])]),a("p",[a("code",[t._v("__prototype__")]),t._v("其实不存在与Person.prototype中的，实际上，它是来自Object.prototype,与其说是一个属性，比如说是一个"),a("code",[t._v("getter/setter")]),t._v("，当使用"),a("code",[t._v("obj.__proto__")]),t._v("时,可以理解成返回了Object.getPrototypeOf(obj)。")]),a("h4",{attrs:{id:"真的是继承吗？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#真的是继承吗？","aria-hidden":"true"}},[t._v("#")]),t._v(" 真的是继承吗？")]),a("p",[t._v("前面讲，“每一个对象都会从原型‘继承’属性”，实际上，继承是一个具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：")]),a("blockquote",[a("p",[t._v("继承意味着复制操作，然而JavaScript默认是不会复制对象的属性的，相反，JavaScript只是两个对象之间创建的一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法会更准确。")])]),a("p",[t._v("文章出自：https://github.com/mqyqingfeng/Blog/issues/2")])])}],!1,null,null,null);e.default=o.exports}}]);