(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{155:function(t,e,n){"use strict";n.r(e);var a=n(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"content"},[n("h2",{attrs:{id:"定义："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#定义：","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义：")]),n("p",[t._v("三元组是指形如((x,y),z)的集合（也就是说：三元组是这样的偶，其中第一个也是一个偶），常简记为(x,y,z)。\n三元组是计算机专业的一门公共基础课程数据结构里的概念。主要用来储存稀疏矩阵的一种压缩方式，也叫三元组表。\n假设以顺序储存结构来表示三元组表(triple table)，则得到稀疏矩阵的一种压缩储存方式，即三元组顺序表，简称三元组表。")]),n("h2",{attrs:{id:"抽象数据类型三元组的定义："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象数据类型三元组的定义：","aria-hidden":"true"}},[t._v("#")]),t._v(" 抽象数据类型三元组的定义：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ADT Triplet {\n  数据对象： D={e1, e2, e3 |e1,e2,e3 ∈ ElemSet (定义了关系运算的某个集合)}\n  数据关系： R1={<e1,e2>,<e2,e3>}\n  基本操作：\n  InitTriplet(&T,v1,v2,v3)\n    操作结果：构造了三元组T，元素e1,e2,e3分别被赋以参数v1,v2,v3的值。\n  DestroyTriplet(&T)\n    操作结果： 三元组T被销毁\n  Get(T,i,&e)\n    初始条件： 三元组T已经存在，i<=i<=3\n    操作结果： 用e返回T的第i元的值\n  Put(&T,i,e)\n    初始条件: 三元组T已经存在，i<=i<=3\n    操作结果：改变T的第i个元素为e\n  IsAscending(T)\n    初始条件：三元组T已经存在\n    操作结果：如果T的3个元素按升序排列，则返回1，否则返回0\n  IsDescending(T)\n    初始条件：三元组T已经存在\n    操作结果：如果T的3个元素按降序排列，则返回1，否则返回0\n  Max(T,&e)\n    初始条件： 三元组T已经存在\n    操作结果：用e返回T的3个元素中最大值\n  Min(T,&e)\n    初始条件：三元组T已存在\n    操作结果：用e返回T的三个元素中的最小值\n}ADT Triplet\n")])])]),n("h2",{attrs:{id:"结构描述："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#结构描述：","aria-hidden":"true"}},[t._v("#")]),t._v(" 结构描述：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("typedef struct{\n  int i,j;\n  ElemType v;\n}Mat;\ntypedef struct{\n  int m, n, t;\n  Mat data[MAXSIZE];\n}Spmatrix;\nSpmatrix a, b;\n")])])]),n("p",[t._v("较完整的方式：")]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("struct node\n{\n  int i,j; // 定义三元组的行、列号\n  int v;  // 三元组的值\n}\nstruct sparmatrix\n{\n  int rows,cols;  // 稀疏矩阵的行、列数\n  int terms;  // 稀疏矩阵的非零元个数\n  struct node data[maxsize];  // 存放稀疏矩阵的三元组表\n}\n")])])])])}],!1,null,null,null);e.default=s.exports}}]);