(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{513:function(n,a,t){"use strict";t.r(a);var e=t(44),r=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"js-图片压缩"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-图片压缩"}},[n._v("#")]),n._v(" JS 图片压缩")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function photoCompress(file, w, objDiv) {\n    var ready = new FileReader();\n    /*开始读取指定的Blob对象或File对象中的内容. 当读取操作完成时,readyState属性的值会成为DONE,如果设置了onloadend事件处理程序,则调用之.同时,result属性中将包含一个data: URL格式的字符串以表示所读取文件的内容.*/\n    ready.readAsDataURL(file);\n    ready.onload = function () {\n    var re = this.result;\n    canvasDataURL(re, w, objDiv)\n    }\n}\n\nfunction canvasDataURL(path, obj, callback) {\n    var img = new Image();\n    img.src = path;\n    img.onload = function () {\n    var that = this;\n    // 默认按比例压缩\n    var w = that.width,\n        h = that.height,\n        scale = w / h;\n    w = obj.width || w;\n    h = obj.height || (w / scale);\n    var quality = 0.7; // 默认图片质量为0.7\n    //生成canvas\n    var canvas = document.createElement('canvas');\n    var ctx = canvas.getContext('2d');\n    // 创建属性节点\n    var anw = document.createAttribute(\"width\");\n    anw.nodeValue = w;\n    var anh = document.createAttribute(\"height\");\n    anh.nodeValue = h;\n    canvas.setAttributeNode(anw);\n    canvas.setAttributeNode(anh);\n    ctx.drawImage(that, 0, 0, w, h);\n    // 图像质量\n    if (obj.quality && obj.quality <= 1 && obj.quality > 0) {\n        quality = obj.quality;\n    }\n    // quality值越小，所绘制出的图像越模糊\n    var base64 = canvas.toDataURL('image/jpeg', quality);\n    // 回调函数返回base64的值\n    callback(base64);\n    }\n}\n/**\n    * 将以base64的图片url数据转换为Blob\n    * @param urlData\n    *            用url方式表示的base64图片数据\n    */\nfunction convertBase64UrlToBlob(urlData) {\n    var arr = urlData.split(','),\n    mime = arr[0].match(/:(.*?);/)[1],\n    bstr = atob(arr[1]),\n    n = bstr.length,\n    u8arr = new Uint8Array(n);\n    while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], {\n    type: mime\n    });\n}\n")])])]),t("p",[n._v("发送请求")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const request = (file, project_id, callback) => {\n    let url = `${env.API_URL}/new_plus/v2/upload_image`;\n    const formdata = new FormData();\n    // 图片压缩\n    photoCompress(file, {\n        quality: 0.1\n    }, function (base64Codes) {\n        var bl = convertBase64UrlToBlob(base64Codes);\n        const is5M = bl.size / 1024 / 1024 > 2;\n        if (is5M) {\n            Toast.info('最多可上传2M大小图片', 1);\n            return false;\n        }\n        Toast.loading('图片上传中，请稍后', 0)\n        formdata.append(\"files\", bl, \"file_\" + Date.parse(new Date()) + \".jpg\");\n        formdata.append(\"project_id\", String(project_id));\n        const options = {\n            method: 'POST',\n            headers: {\n                'Json-Web-Token': getToken(),\n                'lang': 'zh-CN',\n                'client-type': 'h5',\n            },\n            body: formdata,\n        };\n        fetch(url, options)\n            .then(checkStatus)\n            .then((res) => {\n                return res.json().then((e) => {\n                    if (e.succeed || e.code === 0) {\n                        Toast.info('上传截图成功', 1)\n                        callback(e)\n                    }\n                    if (url.indexOf('/login') === -1 && url.indexOf('account_forget') === -1) {\n                        if (e.code === 1005 || e.error_code === 1005 || e.error_code === 3004) {\n                            Toast('登录已过期，请持续登录', 1);\n                        }\n                    }\n                    Toast.info(formatMessage({ id: errMsg(e, url) }), 1);\n                })\n            }).catch((err) => {\n                const status = err.name;\n                if (status === 403) {\n                    window.history.href = \"/404\"\n                    return false;\n                }\n                if (status <= 504 && status >= 500) {\n                    window.history.href = \"/404\"\n                    return false;\n                }\n                if (status >= 404 && status < 422) {\n                    window.history.href = \"/404\"\n                }\n                return Promise.reject('\b网络错误，图片上传失败');\n            });\n    })\n};\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);