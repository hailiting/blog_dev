(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{418:function(t,a,s){t.exports=s.p+"assets/img/performance_Range.5ebc249e.png"},684:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"网页渲染过程与重绘重排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网页渲染过程与重绘重排"}},[t._v("#")]),t._v(" 网页渲染过程与重绘重排")]),t._v(" "),e("h2",{attrs:{id:"图片"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#图片"}},[t._v("#")]),t._v(" 图片")]),t._v(" "),e("p",[e("img",{attrs:{src:s(418),alt:"performance_Range"}})]),t._v(" "),e("ol",[e("li",[t._v("Loading: 加载阶段，网络通信和 html 解析")]),t._v(" "),e("li",[t._v("Scripting: Javascript 执行")]),t._v(" "),e("li",[t._v("Rendering: 重排阶段，样式计算和布局 css")]),t._v(" "),e("li",[t._v("Painting: 重绘阶段")]),t._v(" "),e("li",[t._v("Other: 其他事件花费时间")]),t._v(" "),e("li",[t._v("Idle: 空闲时间")])]),t._v(" "),e("h2",{attrs:{id:"如何减少或避免网页重绘和重排"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#如何减少或避免网页重绘和重排"}},[t._v("#")]),t._v(" 如何减少或避免网页重绘和重排")]),t._v(" "),e("h3",{attrs:{id:"浏览器如何渲染网页"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何渲染网页"}},[t._v("#")]),t._v(" 浏览器如何渲染网页")]),t._v(" "),e("h4",{attrs:{id:"什么是关键渲染路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是关键渲染路径"}},[t._v("#")]),t._v(" 什么是关键渲染路径")]),t._v(" "),e("p",[t._v("是指浏览器从最初接收请求来的 HTML, CSS, Javascript 等资源，然后解析、构建树、渲染布局、绘制，最后呈现给用户能看到的界面这整个过程。\n用户看到页面实际上是分为两个阶段：页面内容加载完成和页面资源加载完成")]),t._v(" "),e("ul",[e("li",[t._v("页面内容加载完成 -》DOMContentLoaded\n-> 仅当 DOM 加载完成，不包括样式表、图片等")]),t._v(" "),e("li",[t._v("页面资源加载完成 =》Load\n-> 页面所有 DOM 样式表、脚本、图片都加载完成")])]),t._v(" "),e("h4",{attrs:{id:"浏览器渲染的主要过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染的主要过程"}},[t._v("#")]),t._v(" 浏览器渲染的主要过程")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("浏览器将获取的 HTML 文档解析 DOM 树；")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("处理 CSS 标记，构成层叠样式表模型 CSSOM(CSS Object Model);")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[t._v("将 DOM 和 CSSOM 合并为渲染树(Rendering Tree)，代表一系列将被渲染的对象；")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"4"}},[e("li",[t._v("渲染树的每个元素包含的内容都是计算过的，被称为布局"),e("code",[t._v("layout")]),t._v("。浏览器使用一种流式处理的方法，只需一次绘制操作就可以布置所有的元素")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"5"}},[e("li",[t._v("将渲染树的各个节点绘制到屏幕上，这一步就是 painting")])])])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("                     DOM\n                      ⏬         布局\nHTML -> 解析HTML -> 生成DOM树       🔼\n                      ⏬          🔽\n                    附着合成  -> 生成渲染树 -> 绘制 -> 显示\n                      🔼\nCSS样式 -> 解析CSS ->生成CSS规则树\n")])])]),e("h3",{attrs:{id:"具体流程详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#具体流程详解"}},[t._v("#")]),t._v(" 具体流程详解")]),t._v(" "),e("blockquote",[e("p",[t._v("重排必定会造成重绘")])]),t._v(" "),e("h4",{attrs:{id:"构建-dom-树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建-dom-树"}},[t._v("#")]),t._v(" 构建 DOM 树")]),t._v(" "),e("p",[t._v("当浏览器接收到服务器响应来的 HTML 文档后，会遍历文档节点，生成 DOM 树。")]),t._v(" "),e("ul",[e("li",[t._v("DOM 树在构建的过程中可能会被 css 和 JS 的加载而执行阻塞")]),t._v(" "),e("li",[e("code",[t._v("display: none")]),t._v("的元素也会在 DOM 树中")]),t._v(" "),e("li",[t._v("注释也会在 DOM 数中")]),t._v(" "),e("li",[e("code",[t._v("Script")]),t._v("标签会在 DOM 树中"),e("br"),t._v("\n无论是 DOM 和 CSSOM，都是要经过"),e("br"),t._v(" "),e("code",[t._v("Bytes")]),t._v(" -> xxxx"),e("br"),t._v(" "),e("code",[t._v("characters")]),t._v("-> "),e("code",[t._v("<html><head></head><body></body></html>")]),e("br"),t._v(" "),e("code",[t._v("tokens")]),t._v(" -> "),e("code",[t._v("StartTag: html")]),t._v(" "),e("code",[t._v("StartTag: head")]),t._v(" ... "),e("code",[t._v("EndTag: head")]),t._v(" "),e("code",[t._v("StartTag: body")]),t._v(" "),e("code",[t._v("EndTag: body")]),e("br"),t._v(" "),e("code",[t._v("nodes")]),t._v(" -> html head meta body p"),e("br"),t._v(" "),e("code",[t._v("DOM")]),t._v(" ->")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("              html\n    head                    body\n meta link               p   div\n")])])]),e("h4",{attrs:{id:"构建-cssom-规则树"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建-cssom-规则树"}},[t._v("#")]),t._v(" 构建 CSSOM 规则树")]),t._v(" "),e("p",[t._v("浏览器解析 css 并生成 CSSOM，每个 CSS 文件都被分析成一个 StyleSheet 对象，每个对象都包含 CSS 规则。CSS 规则对象包含对应于 CSS 语法的选择器和声明对象以及其它对象。")]),t._v(" "),e("ul",[e("li",[t._v("CSS 解析和 DOM 解析同时进行")]),t._v(" "),e("li",[t._v("CSS 解析与"),e("code",[t._v("Script")]),t._v("的执行互斥")]),t._v(" "),e("li",[t._v("在"),e("code",[t._v("Webkit")]),t._v("内核中进行了"),e("code",[t._v("script")]),t._v("执行优化，只有在 JS 访问 CSS 时才会发生互斥")])]),t._v(" "),e("h4",{attrs:{id:"构建渲染树-render-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#构建渲染树-render-tree"}},[t._v("#")]),t._v(" 构建渲染树 Render Tree")]),t._v(" "),e("p",[t._v("通过 DOM 树和 CSS 规则树，浏览器可以通过这两个构建渲染树。浏览器会先从 DOM 树的根节点来遍历每个可见节点，然后对每个可见节点找到适配的 CSS 样式规则并应用。")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("Render Tree")]),t._v("和"),e("code",[t._v("DOM Tree")]),t._v("不完全对应")]),t._v(" "),e("li",[e("code",[t._v("display: none")]),t._v("的元素不在"),e("code",[t._v("Render tree")]),t._v("中")]),t._v(" "),e("li",[e("code",[t._v("visibility: hidden")]),t._v("的元素在"),e("code",[t._v("Render tree")]),e("br"),t._v("\n渲染树生成后，还是没有办法渲染到屏幕上，渲染到屏幕需要得到各个节点位置信息，这就是需要布局(Layout)处理了。")])]),t._v(" "),e("h4",{attrs:{id:"触发分层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发分层"}},[t._v("#")]),t._v(" 触发分层")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("获取 DOM 并将其分割为多个层")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("将每个层独立的绘制进位图中")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"3"}},[e("li",[t._v("将层作为纹理上传至 GPU")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"4"}},[e("li",[t._v("复合多个层来生成最终的屏幕图形")])])])]),t._v(" "),e("p",[t._v("渲染流程")]),t._v(" "),e("blockquote",[e("p",[t._v("DOM 子树渲染层(RenderLayer) -> RenderObject -> GraphicsContext")])]),t._v(" "),e("ul",[e("li",[t._v("根元素、position、transform、半透明、css 滤镜、Canvas2D、video、溢出")])]),t._v(" "),e("blockquote",[e("p",[t._v("Compositor -> 渲染层子树的图形层（GraphicsLayer）-> RenderLayer -> RenderObject")])]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("Compositor 将所有的拥有 compositing layer 进行合成，合成过程 GPU 进行参与。合成完毕就能够将纹理映射到一个网络几何结构上 - 在视频游戏或 CAD 程序中，这种技术用来给框架式 3d 模型添加“皮肤”。Chrome 采用纹理把页面中的内容分块发送给 GPU。纹理能够以很低的代价映射到不同位置，而且还能够以很低的代价通过把它们应用到一个非常简单的矩形网络中进行变形。这就是 3D CSS 的实现原理")])]),t._v(" "),e("li",[t._v("CSS3D 透视变形、video、webgl、transform 动画、加速 CSS 滤镜、叠加在已经触发合成层")])]),t._v(" "),e("h4",{attrs:{id:"渲染树布局-layout-of-the-render-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染树布局-layout-of-the-render-tree"}},[t._v("#")]),t._v(" 渲染树布局 Layout of the render tree")]),t._v(" "),e("p",[t._v("布局阶段从渲染树根节点开始遍历，渲染树的每个节点都是一个"),e("code",[t._v("Render Object")]),t._v("对象，包含宽高、位置、背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是盒子模型。")]),t._v(" "),e("ul",[e("li",[t._v("float 元素，absoulte 元素，fixed 元素会发生位置偏移")]),t._v(" "),e("li",[t._v("脱离文档流 = 脱离"),e("code",[t._v("RenderTree")])])]),t._v(" "),e("h4",{attrs:{id:"渲染树绘制-painting-the-render-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染树绘制-painting-the-render-tree"}},[t._v("#")]),t._v(" 渲染树绘制 Painting the render tree")]),t._v(" "),e("p",[t._v("在绘制阶段，浏览器会遍历渲染树，调用渲染器"),e("code",[t._v("paint()")]),t._v("方法，在屏幕上显示内容。渲染树的绘制工具是由浏览器的 UI 后端组件完成。")]),t._v(" "),e("h3",{attrs:{id:"浏览器渲染网页的那些事"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器渲染网页的那些事"}},[t._v("#")]),t._v(" 浏览器渲染网页的那些事")]),t._v(" "),e("h4",{attrs:{id:"浏览器主要组件结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器主要组件结构"}},[t._v("#")]),t._v(" 浏览器主要组件结构")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("用户界面（用户能看到的浏览器界面）\n      🔽\n浏览器引擎（查询和操作渲染引擎）       -> 数据存储\n      🔽\n渲染引擎（负责解析、渲染请求的内容） 主流渲染引擎： Webkit Gecko\n 🔽      🔽                        🔽\n网络  js解析器[负责解析执行js]   UI后端[负责绘制]\n")])])]),e("h4",{attrs:{id:"渲染阻塞"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#渲染阻塞"}},[t._v("#")]),t._v(" 渲染阻塞")]),t._v(" "),e("p",[t._v("JS 阻塞页面：JS 可以操作 DOM 来修改 DOM 结构，每次去执行 JavaScript 脚本都会严重阻塞 DOM 树的构建，如果 JavaScript 脚本还操作了 CSSOM，而正好这个 CSSOM 还没下载和构建，浏览器会延迟脚本执行和构建 DOM,直至完成其 CSSOM 的下载和构建，如果阻塞了构建 DOM 树，也阻塞了其后构建 CSSOM 规则树，整个解析进程必须等待 JS 的执行完成才能继续完成。")]),t._v(" "),e("p",[t._v("CSS 阻塞渲染：由于 CSSOM 负责存储渲染信息，浏览器就必须保存在合成渲染树之前，CSSOM 是完备的，这种完备是指所有的 CSS(内联、外部好内部)都已经下载完，并解析完，只有 CSSOM 和 DOM 的解析完全结束，浏览器才会进入下一步渲染。")]),t._v(" "),e("p",[t._v("CSS 阻塞渲染意味着，在 CSSOM 完备前，页面将处于白屏状态。将样式放在"),e("code",[t._v("head")]),t._v("中，可以优先解析 CSS，保证更快的首次渲染。")]),t._v(" "),e("p",[t._v("如果页面没有任何样式，CSSOM 依然会生成，默认生成的 CSSOM 自带浏览器默认样式。")]),t._v(" "),e("p",[t._v("解析 dom 同时查找 CSS，所以如果是"),e("code",[t._v("div p{font-size: 16px}")]),t._v("，会先寻找所有 p 标签并判断它的父标签是否为"),e("code",[t._v("div")]),t._v("之后再决定要不要渲染。所以尽量用"),e("code",[t._v("id")]),t._v("或"),e("code",[t._v("class")]),t._v("。")]),t._v(" "),e("h4",{attrs:{id:"回流和重绘-reflow-and-repaint"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回流和重绘-reflow-and-repaint"}},[t._v("#")]),t._v(" 回流和重绘 reflow and repaint")]),t._v(" "),e("h5",{attrs:{id:"reflow-触发机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reflow-触发机制"}},[t._v("#")]),t._v(" reflow 触发机制")]),t._v(" "),e("ol",[e("li",[t._v("添加或删除可见的 DOM 元素")]),t._v(" "),e("li",[t._v("元素位置改变")]),t._v(" "),e("li",[t._v("元素本身的尺寸发生改变")]),t._v(" "),e("li",[t._v("内容改变")]),t._v(" "),e("li",[t._v("页面渲染器初始化")]),t._v(" "),e("li",[t._v("浏览器窗口大小发生改变")])]),t._v(" "),e("h5",{attrs:{id:"reflow-回流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reflow-回流"}},[t._v("#")]),t._v(" reflow 回流")]),t._v(" "),e("p",[t._v("当浏览器发现布局变化，就会重新渲染，就是"),e("code",[t._v("reflow")]),t._v(","),e("code",[t._v("reflow")]),t._v("会从"),e("code",[t._v("html")]),t._v("这个"),e("code",[t._v("root frame")]),t._v("开始递归往下。")]),t._v(" "),e("h5",{attrs:{id:"repaint-重绘"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#repaint-重绘"}},[t._v("#")]),t._v(" repaint 重绘")]),t._v(" "),e("p",[e("code",[t._v("repaint")]),t._v("是当我们改变元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分需要重画，但元素的几何尺寸和位置没有发生改变。\nreflow 必定会引起 repaint。"),e("br"),t._v(" "),e("code",[t._v("display:none")]),t._v("会触发"),e("code",[t._v("reflow")]),t._v("。"),e("br"),t._v(" "),e("code",[t._v("visibility:hidden")]),t._v("只会触发 repaint。")]),t._v(" "),e("p",[t._v("reflow 或 repaint 可能不会立即执行，积攒一批后在统一执行-> 异步 reflow 或增量异步 reflow")]),t._v(" "),e("h4",{attrs:{id:"减少回流或重绘的触发次数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#减少回流或重绘的触发次数"}},[t._v("#")]),t._v(" 减少回流或重绘的触发次数")]),t._v(" "),e("ul",[e("li",[t._v("样式表越简单，重排和重绘就越快")]),t._v(" "),e("li",[t._v("重排和重绘的 DOM 元素层级越高，成本就越高")]),t._v(" "),e("li",[t._v("table 元素的重排和重绘成本要高于 div 元素")]),t._v(" "),e("li",[t._v("尽量不要把读操作和写操作放在一个语句里")]),t._v(" "),e("li",[t._v("用"),e("code",[t._v("transform")]),t._v("做变形和位移可以减少 reflow")]),t._v(" "),e("li",[t._v("避免逐个修改节点样式，尽量一次性修改")]),t._v(" "),e("li",[t._v("使用"),e("code",[t._v("DocumentFragment")]),t._v("将需要多次修改的 DOM 元素缓存，最后一次性"),e("code",[t._v("append")]),t._v("到真实的 DOM 中渲染")]),t._v(" "),e("li",[t._v("可以将需要多次修改的 DOM 元素设置"),e("code",[t._v("display:none")]),t._v("，")]),t._v(" "),e("li",[t._v("避免多次读取某些属性")]),t._v(" "),e("li",[t._v("通过绝对位移将复杂的节点元素脱离文档流，形成新的 Render Layer，降低回流成本。")]),t._v(" "),e("li",[t._v("缓存重排结果\n"),e("ul",[e("li",[t._v("离线 DOM Fragment/clone")]),t._v(" "),e("li",[t._v("虚拟 DOM react")])])])]),t._v(" "),e("h4",{attrs:{id:"优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[t._v("#")]),t._v(" 优化")]),t._v(" "),e("ol",[e("li",[t._v("最小化重绘和重排")]),t._v(" "),e("li",[t._v("批量修改 DOM")])]),t._v(" "),e("ul",[e("li",[t._v("让该元素脱离文档流")]),t._v(" "),e("li",[t._v("对其进行多重改变")]),t._v(" "),e("li",[t._v("将元素带回文档\n具体操作：\n1 隐藏元素，进行修改后在显示")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ul "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#mylist"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nul"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("display "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"none"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ul"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nul"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("display "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"block"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("2 使用文档片段创建一个子树，然后在拷贝到文档中")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fragment "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDocumentFragment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragmnt"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nul"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("3 将原始元素拷贝到一个独立的节点中，操作这个节点，然后覆盖原始元素")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" old "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"#mylist"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" clone "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" old"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("cloneNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nold"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("replaceChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" old"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("缓存布局信息")])]),t._v(" "),e("h2",{attrs:{id:"参考博客"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考博客"}},[t._v("#")]),t._v(" 参考博客：")]),t._v(" "),e("p",[e("a",{attrs:{href:"http://jianshu.com/p/e6252dc9be32x",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器渲染原理与过程"),e("OutboundLink")],1)]),t._v(" "),e("h4",{attrs:{id:"开启-3d-加速-gpu-加速"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开启-3d-加速-gpu-加速"}},[t._v("#")]),t._v(" 开启 3D 加速 GPU 加速")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Texture: 即 CPU 传输到 GPU 的一个 Bitmap")])]),t._v(" "),e("li",[e("p",[t._v("GPU 能够快速对 texture 进行偏移、缩放、旋转、修改透明度等操作")])]),t._v(" "),e("li",[e("p",[t._v("CPU -> 计算里大 GPU -> 并发处理能力强")])])]),t._v(" "),e("h5",{attrs:{id:"layer-模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#layer-模型"}},[t._v("#")]),t._v(" Layer 模型")]),t._v(" "),e("ul",[e("li",[t._v("浏览器根据 css 属性为元素生成 layers")]),t._v(" "),e("li",[t._v("将 layers 作为 texture 上传到 GPU")]),t._v(" "),e("li",[t._v("当改变 Layer 的 transform，opacity 属性时，渲染会跳过 layout paint，直接通知 GPU 对 layer 做出改变")])]),t._v(" "),e("h5",{attrs:{id:"layer-创建标准"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#layer-创建标准"}},[t._v("#")]),t._v(" Layer 创建标准")]),t._v(" "),e("ul",[e("li",[t._v("拥有 3d transform 属性")]),t._v(" "),e("li",[t._v("使用 animation, transition 实现 opacity, transform 动画")]),t._v(" "),e("li",[t._v("video")]),t._v(" "),e("li",[t._v("canvas")]),t._v(" "),e("li",[t._v("flash")]),t._v(" "),e("li",[t._v("使用 css filter 元素")]),t._v(" "),e("li",[t._v("z-index 大于相邻的节点的 layer 元素")])]),t._v(" "),e("p",[e("strong",[t._v("requestAnimatiobnFrame(callback) 定义绘制每一帧前的工作")])]),t._v(" "),e("div",{staticClass:"language-css extra-class"},[e("pre",{pre:!0,attrs:{class:"language-css"}},[e("code",[e("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-transform")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("translateZ")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("0"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("-webkit-backface-visibility")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" hidden"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n-webkit-transform: translate3d(0,0,0);\n触发硬件加速的图片大小只能是256或512，否则拼接处会出现裂缝\n*/")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);