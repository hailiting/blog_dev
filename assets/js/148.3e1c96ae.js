(window.webpackJsonp=window.webpackJsonp||[]).push([[148],{553:function(t,s,a){"use strict";a.r(s);var r=a(44),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nodejs-线上部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-线上部署"}},[t._v("#")]),t._v(" nodejs 线上部署")]),t._v(" "),a("p",[t._v("目前常见的 nodejs 项目部署工具有两个：forever、pm2 这两种")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("forever 管理多个站点，每个站点访问量不大，不需要监控")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("pm2 网站访问量比较大，需要完整的监控界面")])])])]),t._v(" "),a("h2",{attrs:{id:"nginx-conf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-conf"}},[t._v("#")]),t._v(" nginx-conf")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("nginx.conf")])])]),t._v(" "),a("div",{staticClass:"language-conf extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("; nginx.conf\n; 代理与反向代理\nupstream firsttest {\n  server 192.169.0.21:3343;\n  server 192.169.0.21:3000;\n}\nserver {\n  listen 8080;\n  locaion / {\n    proxy_pass http://firsttest\n  }\n}\n")])])]),a("h2",{attrs:{id:"pm2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pm2"}},[t._v("#")]),t._v(" pm2")]),t._v(" "),a("h3",{attrs:{id:"主要特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#主要特点"}},[t._v("#")]),t._v(" 主要特点")]),t._v(" "),a("ul",[a("li",[t._v("内建负载均衡（使用 Node cluster 集群模块）")]),t._v(" "),a("li",[t._v("后台运行")]),t._v(" "),a("li",[t._v("0 秒停机重载（维护的时候不需要停机）")]),t._v(" "),a("li",[t._v("具有 Ubuntu 和 CentOS 的启动脚本")]),t._v(" "),a("li",[t._v("停止不稳定的进程（避免无限循环）")]),t._v(" "),a("li",[t._v("控制台检测")]),t._v(" "),a("li",[t._v("提供 HTTP API")]),t._v(" "),a("li",[t._v("远程控制和实时的接口 API(Nodejs 模块，允许和 PM2 进程管理器交互)")])]),t._v(" "),a("h3",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" -g pm2\n")])])]),a("h3",{attrs:{id:"常用的pm2命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用的pm2命令"}},[t._v("#")]),t._v(" 常用的"),a("code",[t._v("pm2")]),t._v("命令")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[a("code",[t._v("pm2 start app.js")]),t._v(" 启动 node 项目，进入 Node 项目目录，在目录下使用"),a("code",[t._v("pm2 sart app.js")]),t._v("或"),a("code",[t._v("pm2 start bin/www")])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("pm2 stop app.js")]),t._v(" 停止"),a("code",[t._v("pm2")]),t._v("服务")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("pm2 list")]),t._v(" 列出由 pm2 管理的所有进程信息，还会显示一个进程会被启动多少次，因为没有处理的异常")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("pm2 monit")]),t._v("监视每个 node 进程的 CPU 的内存的使用情况")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("pm2 logs")]),t._v("显示所有进程日志")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[a("code",[t._v("pm2 stop all")]),t._v("停止所有进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[a("code",[t._v("pm2 restart all")]),t._v("重启所有进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[a("code",[t._v("pm2 reload all")]),t._v(" 0 秒停机重载进程(用于 networked)进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[a("code",[t._v("pm2 stop 0")]),t._v(" 停止指定的进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"10"}},[a("li",[a("code",[t._v("pm2 restart 0")]),t._v("重启指定的进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"11"}},[a("li",[a("code",[t._v("pm2 startup")]),t._v("产生 init 脚本 保持进程活着")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"12"}},[a("li",[a("code",[t._v("pm2 web")]),t._v("运行健壮的 computer API endpoint(http://localhost:9615)")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"13"}},[a("li",[a("code",[t._v("pm2 delete 0")]),t._v(" 杀死指定进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"14"}},[a("li",[a("code",[t._v("pm2 delete all")]),t._v(" 杀死全部进程")])])])]),t._v(" "),a("h3",{attrs:{id:"运行时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时"}},[t._v("#")]),t._v(" 运行时")]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[a("code",[t._v("pm2 start app.js -i max")]),t._v(" 根据有效 CPU 数目启动最大进程数目")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("pm2 start app.js -i 3")]),t._v("启动 3 个进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("pm2 start app.js -x")]),t._v(" 用 fork 模式启动 app.js 而不是使用 cluster")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("pm2 start app.js -x -- -a 23")]),t._v("用 fork 模式启动 app.js 并且传递参数("),a("code",[t._v("-a 23")]),t._v(")")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("pm2 start app.js --name serverone")]),t._v(" 启动一个进程并把它命名为 serverone")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[a("code",[t._v("pm2 stop serverone")]),t._v(" 停止 serverone 进程")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[a("code",[t._v("pm2 start app.json")]),t._v(" 启动进程，在 app.json 里设置选项")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[a("code",[t._v("pm2 start app.js -i max -- -a 23")]),t._v("在-之后给 app.js 传递参数")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[a("code",[t._v("pm2 start app.js -i max -e err.log -o out.log")]),t._v(" 启动并生成一个配置文件")])])])]),t._v(" "),a("h3",{attrs:{id:"配置-pm2-启动文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置-pm2-启动文件"}},[t._v("#")]),t._v(" 配置 pm2 启动文件")]),t._v(" "),a("p",[t._v("在项目根目录添加"),a("code",[t._v("processes.json")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"apps"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"name"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cwd"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/fullbook"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"script"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bin/www"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"log_date_format"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YYYY-MM-DD HH:mm Z"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"error_file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/var/log/node-app/node-app.stderr.log"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"out_file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"log/node-app.stdout.log"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pid_file"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pids/node-geo-api.pid"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"instances"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"min_uptime"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"200s"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"max_restarts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"max_memory_restart"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1M"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"cron_restart"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1 0 * * *"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"watch"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"merge_logs"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exec_interpreter"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"exec_mode"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fork"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"autorestart"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"vizion"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("apps")]),t._v(" 是一个数组，每一个数组成员都是对应一个 pm2 中运行的应用")]),t._v(" "),a("li",[t._v("name:应用程序名称")]),t._v(" "),a("li",[t._v("cwd:应用程序所在的目录")]),t._v(" "),a("li",[t._v("script:应用程序的脚本路径")]),t._v(" "),a("li",[t._v("log_date_format:")]),t._v(" "),a("li",[t._v("error_file:自定义应用程序的错误日志文件")]),t._v(" "),a("li",[t._v("out_file:自定义应用程序日志文件")]),t._v(" "),a("li",[t._v("pid_file:自定义应用程序的 pid 文件")]),t._v(" "),a("li",[t._v("instances:")]),t._v(" "),a("li",[t._v("min_uptime:最小运行时间，这里设置的是 60s 即如果应用程序在 60s 内退出，pm2 会认为程序异常退出，此时触发重启 max_restarts 设置数量")]),t._v(" "),a("li",[t._v("max_restarts:设置应用程序异常退出重启的次数，默认 15 次（从 0 开始计数）")]),t._v(" "),a("li",[t._v("cron_restart:定时启动，解决重启能解决的问题")]),t._v(" "),a("li",[t._v("watch:是否启用监控模式，默认是 false。如果设置成 true，当应用程序变动时，pm2 会自动重载。这里也可以设置你要监控的文件。")]),t._v(" "),a("li",[t._v("merge_logs:")]),t._v(" "),a("li",[t._v("exec_interpreter:应用程序的脚本类型，这里使用的 shell，默认是 nodejs")]),t._v(" "),a("li",[t._v("exec_mode:应用程序启动模式，这里设置的是 cluster_mode（集群），默认是 fork")]),t._v(" "),a("li",[t._v("autorestart:启用/禁用应用程序崩溃或退出时自动重启")]),t._v(" "),a("li",[t._v("vizion:启用/禁用 vizion 特性(版本控制)")])]),t._v(" "),a("p",[a("strong",[t._v("可以通过"),a("code",[t._v("pm2 start processes.json")]),t._v("来启动")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"start"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node ./bin/www"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"pm2"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pm2 start processes.json"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);