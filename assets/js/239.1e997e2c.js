(window.webpackJsonp=window.webpackJsonp||[]).push([[239],{653:function(_,v,t){"use strict";t.r(v);var e=t(44),i=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"以太坊难度调整"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以太坊难度调整"}},[_._v("#")]),_._v(" 以太坊难度调整")]),_._v(" "),t("h2",{attrs:{id:"什么是难度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是难度"}},[_._v("#")]),_._v(" 什么是难度")]),_._v(" "),t("ul",[t("li",[_._v("**难度(Difficulty)**一词来源于区块链技术的先驱比特币，用来度量挖出一个区块平均需要的运算次数。")]),_._v(" "),t("li",[_._v("挖矿本质上就是在求解一个谜题，不同的电子币设置了不同的谜题。比特币使用 SHA-256、莱特币使用 Scrypt、以太坊使用 Ethash。一个谜题的解的所有取值被称为解的空间，挖矿就是在这些可能的取值中寻找一个解。")]),_._v(" "),t("li",[_._v("这些谜题都有以下共同特点：\n"),t("ul",[t("li",[_._v("没有比穷举法更有效的求解方法")]),_._v(" "),t("li",[_._v("解在空间中均匀分布，从而使每一次穷举尝试找到一个解的概率基本一致")]),_._v(" "),t("li",[_._v("解的空间足够大，保证一定能够找到解")])])]),_._v(" "),t("li",[_._v("现在我们为谜题设置一个参数 Difficulty，那么谜题就变成了求解某个空间内符合"),t("code",[_._v("x<Difficulty")]),_._v("的 x，这个参数"),t("code",[_._v("Difficulty")]),_._v("就是所谓的难度")]),_._v(" "),t("li",[_._v("难度（"),t("code",[_._v("Difficulty")]),_._v("）通过控制合格的解在空间中的数量来控制平均求解所需要尝试的次数，也就可以间接的控制产生一个区块需要的时间，这样就可以使区块以一个合理而稳定的速度产生")]),_._v(" "),t("li",[_._v("当挖矿的人很多，单位时间能够尝试更多次时，难度就会增大，当挖矿的人减少，单位时间能够尝试的次数不少时，难度就会降低。这样产生一个区块需要的时间就可以做到稳定。")])]),_._v(" "),t("h2",{attrs:{id:"以太坊中的难度计算"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以太坊中的难度计算"}},[_._v("#")]),_._v(" 以太坊中的难度计算")]),_._v(" "),t("ul",[t("li",[_._v("难度计算的规则\n"),t("ul",[t("li",[_._v("以太坊有三种计算难度的规则，分别对应着以太坊中三个不同阶段的版本："),t("code",[_._v("Frontier")]),_._v("，"),t("code",[_._v("Homestead")]),_._v("和"),t("code",[_._v("Metropolis")]),_._v("，现在用的方法叫做"),t("code",[_._v("calcDifficultyByzantium()")]),_._v("，对应大都会的拜占庭阶段")])])]),_._v(" "),t("li",[_._v("计算一个区块的难度时，需要以下输入\n"),t("ul",[t("li",[t("code",[_._v("parent_timestamp")]),_._v(": 上一个区块产生的时间")]),_._v(" "),t("li",[t("code",[_._v("parent_diff")]),_._v(": 上一个区块的难度")]),_._v(" "),t("li",[t("code",[_._v("block_timestamp")]),_._v(": 当前区块产生的时间")]),_._v(" "),t("li",[t("code",[_._v("block_number")]),_._v(": 当前区块的序号")])])])]),_._v(" "),t("h3",{attrs:{id:"计算步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算步骤"}},[_._v("#")]),_._v(" 计算步骤")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("block_diff")]),_._v(" = "),t("code",[_._v("parent_diff")]),_._v("+难度调整+难度炸弹")]),_._v(" "),t("li",[t("code",[_._v("难度调整")]),_._v(" = "),t("code",[_._v("parent_diff/2048*max((2 if len(parent.uncles) else 1)-((timestamp-parent.timestamp)//9), -99)")])]),_._v(" "),t("li",[t("code",[_._v("难度炸弹")]),_._v("= "),t("code",[_._v("2^((parent.Number - bombDelay)//100000 -2)")])]),_._v(" "),t("li",[_._v("目前拜占庭阶段，bombDelay = 3000000")]),_._v(" "),t("li",[_._v("另外，区块难度不能低于以太坊的创世区块，创世区块难度为 131072，这是以太坊难度下限")])])])}),[],!1,null,null,null);v.default=i.exports}}]);