(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{511:function(a,n,t){"use strict";t.r(n);var e=t(44),r=Object(e.a)({},(function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"js-常用-api-一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-常用-api-一"}},[a._v("#")]),a._v(" JS 常用 api（一）")]),a._v(" "),t("h2",{attrs:{id:"一-用-es5-实现数组的-map-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-用-es5-实现数组的-map-方法"}},[a._v("#")]),a._v(" 一，用 ES5 实现数组的 map 方法")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.MyMap =  function(fn, context){\n    var arr = Array.prototype.slice.call(this); // 深拷贝\n    var mappedArr = [];\n    for(var i=0;i<arr.length; i++ ){\n        mappedArr.push(fn.call(context,arr[i],i,this));\n    }\n    return mappedArr;\n}\n\nvar arr01 = ['213','12312','12ad'];\nvar arr02=arr01.MyMap(function(acc,index){\n    return acc\n})\n")])])]),t("h2",{attrs:{id:"二-用-es5-实现数组的-reduce-方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-用-es5-实现数组的-reduce-方法"}},[a._v("#")]),a._v(" 二，用 ES5 实现数组的 reduce 方法")]),a._v(" "),t("h3",{attrs:{id:"reduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[a._v("#")]),a._v(" reduce()")]),a._v(" "),t("p",[a._v("1，reduce()方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。\n2，reduce()可以作为高阶函数，用于函数的 compose;\ntips: reduce()对于空数组是不会执行回调函数的。")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var numbers = [12,23,31,123];\nfunction getSum(total, num){\n    return total+num;\n}\nfunction myFunction(item){\n    var sum = numbers.reduce(getSum);\n}\n")])])]),t("blockquote",[t("p",[t("code",[a._v("array.reduce(function(total, currentValue, currentIndex, arr), initialValue)")]),a._v("\ntotal: 必须。初始值，或计算结束后的返回值。\ncurrentValue: 必须。当前元素\ncurrentIndex: 可选。 当前元素的索引\narr: 可选。当前元素所属的数组对象\ninitialValue: 可选。传递给函数的初始值")])]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Array.prototype.myReduce = function(fn, initialValue){\n    var arr = Array.prototype.slice.call(this);\n    var res, startIndex; // 如果没有初始值   startindex 为1，如果有  startindex为0\n    res = initialValue?initialValue: arr[0]\n    startIndex = initialValue? 0:1;\n    for(var i=startIndex; i<arr.length;i++){\n        res=fn.call(null, res, arr[i], i, this);\n    }\n    return res;\n}\n")])])]),t("h2",{attrs:{id:"三-实现-call-apply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-实现-call-apply"}},[a._v("#")]),a._v(" 三，实现 call/apply")]),a._v(" "),t("h3",{attrs:{id:"call-、apply-、bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#call-、apply-、bind"}},[a._v("#")]),a._v(" call()、apply()、bind()")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 例一：\nvar name = \"小王\", age = 17;\nvar obj = {\n    name: '小张',\n    objAge: this.age,  // this指 window\n    myFun: function(){\n        console.log(this.name + '年龄：'+this.age); // this这obj\n    }\n}\nobj.objAge; // 17\nobj.myFun(); // 小张年龄：undefined\n// 例二：\nvar fav = \"盲僧\";\nfunction shows(){\n    console.log(this.fav);\n}\nshows(); // 盲僧\n")])])]),t("p",[a._v("call()、apply()、bind() 重新定义 this 对象")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var name = \"小王\", age = 17;\nvar obj = {\n    name: '小张',\n    objAge: this.age,  // this指 window\n    myFun: function(){\n        console.log(this.name + '年龄：'+this.age); // this这obj\n    }\n}\nvar db={\n    name: \"小红\",\n    age: 18,\n}\nobj.objAge; // 17\nobj.myFun.call(db); // 小红年龄：18\nobj.myFun.apply(db); // 小红年龄：18\nobj.myFun.bind(db)(); // 小红年龄：18\n")])])]),t("p",[a._v("tip： bind 返回的是一个新的函数，必须在次调用才会执行")]),a._v(" "),t("h4",{attrs:{id:"传参"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#传参"}},[a._v("#")]),a._v(" 传参")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("var name = \"小王\", age = 17;\nvar obj = {\n    name: '小张',\n    objAge: this.age,  // this指 window\n    myFun: function(a,b){\n        console.log(this.name + '年龄：'+this.age+'来自'+a+\", 去往\"+b+'.'); // this这obj\n    }\n}\nvar db={\n    name: \"小红\",\n    age: 18,\n}\nobj.objAge; // 17\nobj.myFun.call(db, '火星', '木星'); // 小红年龄：18， 来自火星, 去往木星。\nobj.myFun.apply(db,['火星', '木星']); // 小红年龄：18， 来自火星, 去往木星。\nobj.myFun.bind(db, '火星', '木星')(); // 小红年龄：18， 来自火星, 去往木星。\nobj.myFun.bind(db,['火星', '木星'])(); // 小红年龄：18， 来自火星, 木星, 去往 undefind。\n")])])]),t("p",[a._v("call, apply, bind 第一个参数都是 this 的指向对象，第二个参数有所不同。\napply 必须放到一个数组里")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// 实现apply只要把下一行中的...args换为args即可\nFunction.prototype.myCall = function(context=window, ...args){\n    let Func = this;\n    let fn = Symbol('fn');\n    context[fn] = func;\n    let res = context[fn](...args); // 重点代码，利用this指向，相当于context.caller(...args);\n    delete context[fn];\n    return res;\n}\n")])])]),t("h2",{attrs:{id:"四-object-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-object-create"}},[a._v("#")]),a._v(" 四: object.create")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("function create(proto){\n    function F(){};\n    F.prototype = proto;\n    F.prototype.constructor = F;\n    return new F()\n}\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);