(window.webpackJsonp=window.webpackJsonp||[]).push([[169],{575:function(e,n,r){"use strict";r.r(n);var t=r(44),o=Object(t.a)({},(function(){var e=this,n=e.$createElement,r=e._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"react-chardingview-socket"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#react-chardingview-socket"}},[e._v("#")]),e._v(" React_ChardingView_socket")]),e._v(" "),r("p",[e._v("中文文档地址 https://b.aitrade.ga/books/tradingview/")]),e._v(" "),r("h2",{attrs:{id:"文件结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#文件结构"}},[e._v("#")]),e._v(" 文件结构")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("src\n  |- service\n  |     |- socket.js    // 链接ws，ws监听 推送 取消订阅 更新最新ticker 等的方法\n  |- root.component.js  // 引用socket\n  |- pages\n  |    |-kLine\n  |        |-index.js   // socket 订阅历史\n")])])]),r("h2",{attrs:{id:"常见问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[e._v("#")]),e._v(" 常见问题")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// 设置图标价格精度\nconst e = chart.priceFormatter();\ne.format = (v) => new bigNumber(v).toFixed(1, 1);\n")])])]),r("h2",{attrs:{id:"方法一-npm-trader-view"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法一-npm-trader-view"}},[e._v("#")]),e._v(" 方法一： npm trader-view")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('import {TradingView, Datafeed } from "trader-view";\n')])])]),r("h3",{attrs:{id:"tradingview-初始化图标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tradingview-初始化图标"}},[e._v("#")]),e._v(" TradingView 初始化图标")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// params ={symbol, resolution, from, to, firstDataRequest}\n// list为数组 ep: [ {time,close,high,low,open,volume} ... ]\n   initDatafeed() {\n    const { symbol } = this.props;\n\n    this.datafeed = new Datafeed({\n      history: (params) => {\n        return this.getHistData(\n          params.symbol,\n          params.resolution,\n          params.from,\n          params.to,\n          params.firstDataRequest\n        );\n      },\n      time: () => new Promise((resolve) => resolve(1)),\n      config: () =>\n        new Promise((resolve) =>\n          resolve({\n            supports_search: true,\n            supports_group_request: false,\n            supported_resolutions: [\n              ...new Set(periods.map((item) => item.interval)),\n            ],\n            supports_marks: false,\n            supports_timescale_marks: false,\n            supports_time: true,\n          })\n        ),\n      symbols: () =>\n        new Promise((resolve) => resolve(createSymbolInfo(symbol))),\n    });\n\n    this.datafeed.subscribeBars = (\n      symbolInfo,\n      resolution,\n      onRealtimeCallback,\n      subscribeUID,\n      onResetCacheNeededCallback\n    ) => {\n      this.onRealtimeCallback = onRealtimeCallback;\n      this.onResetCacheNeededCallback = onResetCacheNeededCallback;\n    };\n    /**\n     * 解析商品信息\n     */\n    this.datafeed.resolveSymbol = (symbol, onResolve, onError) => {\n      onResolve(createSymbolInfo(symbol));\n    };\n    this.datafeed.getBars = (\n      symbolInfo,\n      resolution,\n      from,\n      to,\n      onHistoryCallback,\n      onErrorCallback,\n      firstDataRequest\n    ) => {\n      this.onHistoryCallback = onHistoryCallback;\n      this.from = from;\n      this.to = to;\n      const { symbol, currentPeriod } = this.props;\n      const { period, interval, count } = periods[currentPeriod];\n      socket.subscribe("subHis", symbol, period, from);\n      // this.initWebSocket().then((res) => {\n      //   res.onopen = () => {\n      //     const { symbol, currentPeriod } = this.props;\n      //     const { period, interval, count } = periods[currentPeriod];\n      //     if (res) {\n      //       res.send(\n      //         subscribe.subHis(\n      //           symbol,\n      //           period,\n      //           from,\n      //           Math.ceil((to - from) / 60 / count)\n      //         )\n      //       );\n      //     }\n      //   };\n      // });\n    };\n  }\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('this.widget = new TradingView({\n  // debug: true,\n  // fullscreen: true,\n  custom_css_url: host + "charting_library/static/chardingView.css", // 自定义tradingview样式\n  symbol: "BTC", // 商品名\n  interval: "D", // 周期  1s 1m 1h 1W 1M 1Y ....\n  preset: "mobile",\n  container_id: "tv_chart_container",\n  // datafeed JavaScript对象的实现接口，以反馈数据显示在图表上 必须项\n  datafeed: this.datafeed,\n  height: "100%",\n  width: "100%",\n  library_path: host+"charting_library/",\n  locale: "zh",\n  loading_screen:{\n    backgroundColor: "#fff",\n    foregroundColor: "#fff",\n  },\n  // 禁用自带的一些功能\n  disabled_features: [\n    "left_toolbar",\n    "volume_force_overlay",\n    "create_volume_indicator_by_default",\n    "create_volume_indicator_by_default_once",\n    "format_button_in_legend",\n    "hide_left_toolbar_by_default",\n    "go_to_date",\n    "use_localstorage_for_settings",\n    "save_chart_properties_to_local_storage",\n    "main_series_scale_menu",\n    "show_logo_on_all_charts" // 在多图表布局的每个图表上显示微标\n    "header_settings",\n    "timeframes_toolbar",\n    "chart_property_page_background",\n    "compare_symbol",\n    "go_to_date",\n    "header_chart_type",\n    "header_compare",\n    "header_interval_dialog_button",\n    "header_screenshot",\n    "header_symbol_search", // 头部搜索\n    "header_widget_dom_node", // 隐藏头部组件\n    "source_selection_markers", // 禁用系列和指示器的选择标记\n    "header_indicators", // 图标指标\n    "adaptive_logo", // 移动端隐藏logo\n    "header_undo_redo", // 撤销返回\n    "show_hide_button_in_legend",\n    "show_interval_dialog_on_key_press",\n    "snapshot_trading_drawings",\n    "symbol_info",\n    "border_around_the_chart",\n    "remove_library_container_border",\n    "header_saveload",\n    "header_resolutions",\n  ],\n  overrides: getOverrides("white"),\n  studies_overrides: {\n    "volume.volume.color.0": "#eb4d5c",\n    "volume.valume.color.1": "#53b987",\n    "volume.volume.transparency": 70,\n    "volume.options.showStudyArguments": !1,\n    "MA Cross.short:plot.color": "#6b3798",\n    "MA Cross.long:plot.color": "#708957",\n  },\n  enabled_features: ["hide_last_na_study_output"],\n  charts_storage_url: "http://saveload.tradingview.com",\n  charts_storage_api_version:"1.1",\n  client_id: "tradingview.com",\n  user_id:"public_user_id",\n  theme: "Light",\n  timezone: "Asia/Shannghai"\n});\nthis.widget.onChartReady(()=>{\n  const chart = this.widget.chart();\n  chart.setResolution(inte, ()=>{});\n  chart.setChartType(chartType);\n  // 每当十字线位置改变时，图标库将会调用回调函数\n  chart.crossHairMoved(({time})=>{\n    if(!time){\n      return;\n    }\n  })\n})\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('export const getOverrides = (theme) => {\n  const themes = {\n    white: {\n      up: "#1dc6ac",\n      down: "#e8506c",\n      bg: "rgba(255, 255, 255, 0)",\n      grid: "#EDF1F7",\n      cross: "#CAD1E7",\n      border: "#EDF1F7",\n      text: "#CAD1E7",\n      areatop: "rgba(71, 78, 112, 0.1)",\n      areadown: "rgba(71, 78, 112, 0.02)",\n      line: "#EDF1F7",\n    },\n    black: {\n      //url: "night.css",\n      up: "#589065",\n      down: "#ae4e54",\n      bg: "#181B2A",\n      grid: "#1f2943",\n      cross: "#9194A3",\n      border: "#4e5b85",\n      text: "#61688A",\n      areatop: "rgba(122, 152, 247, .1)",\n      areadown: "rgba(122, 152, 247, .02)",\n      line: "#737375",\n    },\n    mobile: {\n      //url: "mobile.css",\n      up: "#03C087",\n      down: "#E76D42",\n      bg: "#ffffff",\n      grid: "#f7f8fa",\n      cross: "#23283D",\n      border: "#C5CFD5",\n      text: "#8C9FAD",\n      areatop: "rgba(71, 78, 112, 0.1)",\n      areadown: "rgba(71, 78, 112, 0.02)",\n      showLegend: !0,\n    },\n  };\n  const t = themes[theme];\n  return {\n    volumePaneSize: "medium",\n    "scalesProperties.lineColor": t.text,\n    "scalesProperties.textColor": t.text,\n    "paneProperties.background": t.bg,\n    "paneProperties.vertGridProperties.color": t.grid,\n    "paneProperties.horzGridProperties.color": t.grid,\n    "paneProperties.crossHairProperties.color": t.cross,\n    "paneProperties.legendProperties.showLegend": !!t.showLegend,\n    "paneProperties.legendProperties.showStudyArguments": !0,\n    "paneProperties.legendProperties.showStudyTitles": !0,\n    "paneProperties.legendProperties.showStudyValues": !0,\n    "paneProperties.legendProperties.showSeriesTitle": !0,\n    "paneProperties.legendProperties.showSeriesOHLC": !0,\n    "mainSeriesProperties.candleStyle.upColor": t.up,\n    "mainSeriesProperties.candleStyle.downColor": t.down,\n    "mainSeriesProperties.candleStyle.drawWick": !0,\n    "mainSeriesProperties.candleStyle.drawBorder": !0,\n    "mainSeriesProperties.candleStyle.borderColor": t.border,\n    "mainSeriesProperties.candleStyle.borderUpColor": t.up,\n    "mainSeriesProperties.candleStyle.borderDownColor": t.down,\n    "mainSeriesProperties.candleStyle.wickUpColor": t.up,\n    "mainSeriesProperties.candleStyle.wickDownColor": t.down,\n    "mainSeriesProperties.candleStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.hollowCandleStyle.upColor": t.up,\n    "mainSeriesProperties.hollowCandleStyle.downColor": t.down,\n    "mainSeriesProperties.hollowCandleStyle.drawWick": !0,\n    "mainSeriesProperties.hollowCandleStyle.drawBorder": !0,\n    "mainSeriesProperties.hollowCandleStyle.borderColor": t.border,\n    "mainSeriesProperties.hollowCandleStyle.borderUpColor": t.up,\n    "mainSeriesProperties.hollowCandleStyle.borderDownColor": t.down,\n    "mainSeriesProperties.hollowCandleStyle.wickColor": t.line,\n    "mainSeriesProperties.haStyle.upColor": t.up,\n    "mainSeriesProperties.haStyle.downColor": t.down,\n    "mainSeriesProperties.haStyle.drawWick": !0,\n    "mainSeriesProperties.haStyle.drawBorder": !0,\n    "mainSeriesProperties.haStyle.borderColor": t.border,\n    "mainSeriesProperties.haStyle.borderUpColor": t.up,\n    "mainSeriesProperties.haStyle.borderDownColor": t.down,\n    "mainSeriesProperties.haStyle.wickColor": t.border,\n    "mainSeriesProperties.haStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.barStyle.upColor": t.up,\n    "mainSeriesProperties.barStyle.downColor": t.down,\n    "mainSeriesProperties.barStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.barStyle.dontDrawOpen": !1,\n    "mainSeriesProperties.lineStyle.color": t.border,\n    "mainSeriesProperties.lineStyle.linewidth": 1,\n    "mainSeriesProperties.lineStyle.priceSource": "close",\n    "mainSeriesProperties.areaStyle.color1": t.areatop,\n    "mainSeriesProperties.areaStyle.color2": t.areadown,\n    "mainSeriesProperties.areaStyle.linecolor": t.border,\n    "mainSeriesProperties.areaStyle.linewidth": 1,\n    "mainSeriesProperties.areaStyle.priceSource": "close",\n  };\n};\n')])])]),r("h4",{attrs:{id:"设置图表背景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设置图表背景"}},[e._v("#")]),e._v(" 设置图表背景")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// chardingView.css\ntable.chart-markup-table {\n  background-color: #fafafd;\n  background: url("./images/logo.png") #fafafd no-repeat center center;\n  background-size: 251px 51px;\n}\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("export const resolveSymbol = ({\n  Sec: t,\n  PrzClose: c,\n  PrzHigh: h,\n  PrzLow: l,\n  PrzOpen: o,\n  Volume: v,\n}) => ({\n  time: t * 1000,\n  close: toNumber(c),\n  high: toNumber(h),\n  low: toNumber(l),\n  open: toNumber(o),\n  volume: toNumber(v),\n});\n\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('export const createSymbolInfo =(symbol)=>({\n  name: symbol,\n  full_name: symbol,\n  description: symbol,\n  ticker: symbol,\n  session: "24x7",\n  exchange: "",\n  listed_exchange: "",\n  timezone: "Asia/Shanghai",\n  format: "price",\n  pricescale: 100,\n  minmov: 1,\n  minmov2: 2,\n  has_intraday: true,\n  has_no_valume: false,\n  has_daily: true,\n  has_weekly_and_monthly: true,\n  has_empty_bars: true,\n  supported_resolutions: periods.map((item)=> item.interval),\n  intraday_multipliers: periods.map((item)=> item.interval),\n})\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('export const getOverrides = (theme) => {\n  const themes = {\n    white: {\n      //url: "day.css",\n      up: "#03c087",\n      down: "#ef5555",\n      bg: "rgba(0, 0, 0, 0)",\n      grid: "#EDF1F7",\n      cross: "#CAD1E7",\n      border: "#EDF1F7",\n      text: "#CAD1E7",\n      areatop: "rgba(71, 78, 112, 0.1)",\n      areadown: "rgba(71, 78, 112, 0.02)",\n      line: "#EDF1F7",\n    },\n    black: {\n      //url: "night.css",\n      up: "#589065",\n      down: "#ae4e54",\n      bg: "#181B2A",\n      grid: "#1f2943",\n      cross: "#9194A3",\n      border: "#4e5b85",\n      text: "#61688A",\n      areatop: "rgba(122, 152, 247, .1)",\n      areadown: "rgba(122, 152, 247, .02)",\n      line: "#737375",\n    },\n    mobile: {\n      //url: "mobile.css",\n      up: "#03C087",\n      down: "#E76D42",\n      bg: "#ffffff",\n      grid: "#f7f8fa",\n      cross: "#23283D",\n      border: "#C5CFD5",\n      text: "#8C9FAD",\n      areatop: "rgba(71, 78, 112, 0.1)",\n      areadown: "rgba(71, 78, 112, 0.02)",\n      showLegend: !0,\n    },\n  };\n  const t = themes[theme];\n  return {\n    volumePaneSize: "medium",\n    "scalesProperties.lineColor": t.text,\n    "scalesProperties.textColor": t.text,\n    "paneProperties.background": t.bg,\n    "paneProperties.vertGridProperties.color": t.grid,\n    "paneProperties.horzGridProperties.color": t.grid,\n    "paneProperties.crossHairProperties.color": t.cross,\n    "paneProperties.legendProperties.showLegend": !!t.showLegend,\n    "paneProperties.legendProperties.showStudyArguments": !0,\n    "paneProperties.legendProperties.showStudyTitles": !0,\n    "paneProperties.legendProperties.showStudyValues": !0,\n    "paneProperties.legendProperties.showSeriesTitle": !0,\n    "paneProperties.legendProperties.showSeriesOHLC": !0,\n    "mainSeriesProperties.candleStyle.upColor": t.up,\n    "mainSeriesProperties.candleStyle.downColor": t.down,\n    "mainSeriesProperties.candleStyle.drawWick": !0,\n    "mainSeriesProperties.candleStyle.drawBorder": !0,\n    "mainSeriesProperties.candleStyle.borderColor": t.border,\n    "mainSeriesProperties.candleStyle.borderUpColor": t.up,\n    "mainSeriesProperties.candleStyle.borderDownColor": t.down,\n    "mainSeriesProperties.candleStyle.wickUpColor": t.up,\n    "mainSeriesProperties.candleStyle.wickDownColor": t.down,\n    "mainSeriesProperties.candleStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.hollowCandleStyle.upColor": t.up,\n    "mainSeriesProperties.hollowCandleStyle.downColor": t.down,\n    "mainSeriesProperties.hollowCandleStyle.drawWick": !0,\n    "mainSeriesProperties.hollowCandleStyle.drawBorder": !0,\n    "mainSeriesProperties.hollowCandleStyle.borderColor": t.border,\n    "mainSeriesProperties.hollowCandleStyle.borderUpColor": t.up,\n    "mainSeriesProperties.hollowCandleStyle.borderDownColor": t.down,\n    "mainSeriesProperties.hollowCandleStyle.wickColor": t.line,\n    "mainSeriesProperties.haStyle.upColor": t.up,\n    "mainSeriesProperties.haStyle.downColor": t.down,\n    "mainSeriesProperties.haStyle.drawWick": !0,\n    "mainSeriesProperties.haStyle.drawBorder": !0,\n    "mainSeriesProperties.haStyle.borderColor": t.border,\n    "mainSeriesProperties.haStyle.borderUpColor": t.up,\n    "mainSeriesProperties.haStyle.borderDownColor": t.down,\n    "mainSeriesProperties.haStyle.wickColor": t.border,\n    "mainSeriesProperties.haStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.barStyle.upColor": t.up,\n    "mainSeriesProperties.barStyle.downColor": t.down,\n    "mainSeriesProperties.barStyle.barColorsOnPrevClose": !1,\n    "mainSeriesProperties.barStyle.dontDrawOpen": !1,\n    "mainSeriesProperties.lineStyle.color": t.border,\n    "mainSeriesProperties.lineStyle.linewidth": 1,\n    "mainSeriesProperties.lineStyle.priceSource": "close",\n    "mainSeriesProperties.areaStyle.color1": t.areatop,\n    "mainSeriesProperties.areaStyle.color2": t.areadown,\n    "mainSeriesProperties.areaStyle.linecolor": t.border,\n    "mainSeriesProperties.areaStyle.linewidth": 1,\n    "mainSeriesProperties.areaStyle.priceSource": "close",\n  };\n};\n')])])]),r("h3",{attrs:{id:"websocket-链接获取数据"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#websocket-链接获取数据"}},[e._v("#")]),e._v(" websocket 链接获取数据")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('let _cache = {}; // 暂存所有交易对信息\ninitWebSocket(isFirst = false){\n  this.socket = new WebSocket("wss://ss....");\n  // 最基础的需要订阅k线数据，最新ticker\n  this.socket.onmessage=(e)=>{\n    this.onSocketMessage(e.data);\n  }\n}\nonSocketMessage(data){\n  try{\n    if(!data){\n      return;\n    }\n    if(data === "PONG"){\n      return;\n    }\n    const _data = JSON.parse(data);\n    if(_data.subj==="index"){\n      if(this.onRealtimeCallback){\n        const bars = Object.entries(_cache).sort((a,b)=>a[0]-b[0]);\n        // 最后一条数据用最新数据\n        const item = bars[bars.length-1];\n        if(item){\n          const bar = item[1];\n          bar.close = _data.data.Prz;\n          bar.time = item[0]/1;\n          this.onRealtimeCallback(bar);\n        }\n      }\n    } else if(_data.subj === "kline"){\n      const bars = resolveSymbol(_data.data);\n      _cache[bar.time] = bar;\n      _lastBar = {...bar};\n      if(this.onRealtimeCallback){\n        setTimeout(()=>{\n          this.onRealtimeCallback(bar);\n        }, 100);\n      }\n    } else if(_data.data.Count){\n      if(this.onHistoryCallback){\n        const {\n          Sec, PrzOpen, PrzClose, PrzHigh, PrzLow, Volume, Count\n        } = _data.data;\n        const {symbol, currentPeriod} = this.props;\n        const {period, interval} = periods[currentPeriod];\n        const list = [];\n        for(let i=0;i<Count; i++){\n          const bar = {\n            time: Sec[i]*1000,\n            close: toNumber(PrzClose[i]),\n            high: toNumber(PrzHigh[i]),\n            low: toNumber(PrzLow[i]),\n            open: toNumber(PrzOpen[i]),\n            volume: toNumber(Volume[i]),\n          }\n          list.push(bar);\n          _cache[bar.time] = bar;\n          if(i===Count-1){\n            _lastBar = {...bar};\n            console.log("last", bar.time);\n          }\n        }\n        this.onHistoryCallback(list, {\n          noData: !list.length,\n          nextTime: Sec[Sec.length -1]*1000,\n        });\n        if(this.socket){\n          this.socket.send(subscribe.sub(symbol, period));\n        }\n      }\n    }\n  }\n}\n')])])]),r("p",[e._v("websock 订阅的参数")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('let hisPage = "1";\nconst subscribe = {\n  sub: (symbol, period) =>{\n    ++hisPage;\n    return JSON.stringify({\n      req: "Sub",\n      rid: `${hisPage}`,\n      args: [\n        `kline_${period}_GMEX_CI_${symbol}`,\n        `index_GMEX_CI_${symbol}`,\n        \'__slow__\',\n      ],\n      expires: +new Date(),\n    })\n  },\n  unsub: (symbol, period, all=true){\n    ++hisPage;\n    return JSON.stringify({\n      req: "Unsub",\n      rid: `${hisPage}`,\n      args: all ? [\n          `index_GMEX_CI_${symbol}`,\n          `kline_${period}_GMEX_CI_${symbol}`,\n          `GMEX_CI_${symbol}`,\n        ]\n        : [`GMEX_CI_${symbol}`],\n      expires: +new Date(),\n    });\n  },\n  subHis: (symbol, period, Sec, Count) => {\n    ++hisPage;\n    return JSON.stringify({\n      req: "GetHistKLine",\n      rid: `${hisPage}`,\n      args: {\n        Sym: `GMEX_CI_${symbol}`,\n        Typ: period,\n        Sec,\n        Offset: 0,\n        Count,\n      },\n      expires: +new Date(),\n    });\n  },\n}\n')])])]),r("h4",{attrs:{id:"生命周期销毁的时候"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期销毁的时候"}},[e._v("#")]),e._v(" 生命周期销毁的时候")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("\n")])])]),r("h3",{attrs:{id:"更新-tradingview"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新-tradingview"}},[e._v("#")]),e._v(" 更新 tradingview")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("componentWillUpdate(nextProps) {\n  const { currentPeriod, symbol } = nextProps;\n  const { currentPeriod: c, symbol: s } = this.props;\n  const period = periods[currentPeriod];\n  if (!this.widget) {\n    return;\n  }\n\n  if (c !== currentPeriod) {\n    this.widget.chart().setResolution(period.interval, () => { });\n    this.widget.chart().setChartType(period.chartType);\n    // this.onResetCacheNeededCallback && this.onResetCacheNeededCallback();\n    // this.widget.chart().resetData();\n    _cache = {};\n    this.socket.send(subscribe.unsub(s, periods[c].period));\n    // this.initSub(nextProps);\n  }\n}\n")])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// kLine/index.js\nimport React from "react";\nimport moment from "moment";\nimport { connect } from "react-redux";\nimport { Scoped } from "kremling";\nimport { TradingView, Datafeed } from "trader-view";\nimport {\n  periods,\n  studys,\n  resolveSymbol,\n  createSymbolInfo,\n  toNumber,\n  getOverrides,\n} from "@/utils/tradingviewHelper";\nimport socket from "@/service/socket";\nimport Text from "@/components/text";\nimport styles from "./index.krem.scss";\n\n// http://localhost:9001\nconst host = process.env.NODE_ENV === "development" ? "/" : "/micro/contract/";\n\n// 暂存所以交易对信息\nlet _cache = {};\nlet _lastBar = null;\nlet _selectTime = "";\n@connect(({ allSymbolsContract: { currentPeriod, symbol } }) => {\n  return {\n    currentPeriod,\n    symbol,\n  };\n})\nexport default class Kline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      minTime: 0, // 不在此范围内，弹层将被隐藏\n      maxTime: 0, // 不在此范围内，弹层将被隐藏\n      bar: {}, // 当前选中的bar\n      prevBar: {}, // 当前选中bar的前一个bar\n    };\n  }\n  /**\n   * 初始订阅\n   */\n  async initSub({ symbol, currentPeriod }) {\n    const { period, interval, count } = periods[currentPeriod];\n    await socket.subscribe("subHis", symbol, period, this.from);\n  }\n\n  /**\n   * 监听WebSocket响应\n   * @param msg string\n   */\n  onSocketMessage = (data) => {\n    if (data.subj === "index") {\n      // 更新最后一条数据\n      if (this.onRealtimeCallback) {\n        const bars = Object.entries(_cache).sort((a, b) => a[0] - b[0]); //;\n        const item = bars[bars.length - 1];\n        if (item) {\n          const bar = item[1];\n          bar.close = data.data.Prz;\n          bar.time = item[0] / 1;\n          this.onRealtimeCallback(bar);\n        }\n      }\n    } else if (data.subj === "kline") {\n      const bar = resolveSymbol(data.data);\n      // 存入缓存\n      _cache[bar.time] = bar;\n      _lastBar = { ...bar };\n      // console.log("kline", _lastBar);\n      console.log("put", bar.time);\n      if (this.onRealtimeCallback) {\n        setTimeout(() => {\n          this.onRealtimeCallback(bar);\n        }, 100);\n      }\n    } else if (data.data.Count) {\n      if (this.onHistoryCallback) {\n        const {\n          Sec,\n          PrzOpen,\n          PrzClose,\n          PrzHigh,\n          PrzLow,\n          Volume,\n          Count,\n        } = data.data;\n\n        const { symbol, currentPeriod } = this.props;\n        const { period, interval } = periods[currentPeriod];\n        const list = [];\n\n        for (let i = 0; i < Count; i++) {\n          const bar = {\n            time: Sec[i] * 1000,\n            close: toNumber(PrzClose[i]),\n            high: toNumber(PrzHigh[i]),\n            low: toNumber(PrzLow[i]),\n            open: toNumber(PrzOpen[i]),\n            volume: toNumber(Volume[i]),\n          };\n          list.push(bar);\n          // 存入缓存\n          _cache[bar.time] = bar;\n          if (i === Count - 1) {\n            _lastBar = { ...bar };\n            console.log("last", bar.time);\n          }\n        }\n\n        this.onHistoryCallback(list, {\n          noData: !list.length,\n          nextTime: Sec[Sec.length - 1] * 1000,\n        });\n\n        socket.subscribe("sub", symbol, period);\n      }\n    }\n  };\n\n  /**\n   * 初始化 JS API\n   */\n  initDatafeed() {\n    const { symbol } = this.props;\n\n    this.datafeed = new Datafeed({\n      history: (params) => {\n        return this.getHistData(\n          params.symbol,\n          params.resolution,\n          params.from,\n          params.to,\n          params.firstDataRequest\n        );\n      },\n      time: () => new Promise((resolve) => resolve(1)),\n      config: () =>\n        new Promise((resolve) =>\n          resolve({\n            supports_search: true,\n            supports_group_request: false,\n            supported_resolutions: [\n              ...new Set(periods.map((item) => item.interval)),\n            ],\n            supports_marks: false,\n            supports_timescale_marks: false,\n            supports_time: true,\n          })\n        ),\n      symbols: () =>\n        new Promise((resolve) => resolve(createSymbolInfo(symbol))),\n    });\n\n    this.datafeed.subscribeBars = (\n      symbolInfo,\n      resolution,\n      onRealtimeCallback,\n      subscribeUID,\n      onResetCacheNeededCallback\n    ) => {\n      this.onRealtimeCallback = onRealtimeCallback;\n      this.onResetCacheNeededCallback = onResetCacheNeededCallback;\n    };\n    /**\n     * 解析商品信息\n     */\n    this.datafeed.resolveSymbol = (symbol, onResolve, onError) => {\n      onResolve(createSymbolInfo(symbol));\n    };\n    this.datafeed.getBars = (\n      symbolInfo,\n      resolution,\n      from,\n      to,\n      onHistoryCallback,\n      onErrorCallback,\n      firstDataRequest\n    ) => {\n      this.onHistoryCallback = onHistoryCallback;\n      this.from = from;\n      this.to = to;\n      const { symbol, currentPeriod } = this.props;\n      const { period, interval, count } = periods[currentPeriod];\n      socket.subscribe("subHis", symbol, period, from);\n      // this.initWebSocket().then((res) => {\n      //   res.onopen = () => {\n      //     const { symbol, currentPeriod } = this.props;\n      //     const { period, interval, count } = periods[currentPeriod];\n      //     if (res) {\n      //       res.send(\n      //         subscribe.subHis(\n      //           symbol,\n      //           period,\n      //           from,\n      //           Math.ceil((to - from) / 60 / count)\n      //         )\n      //       );\n      //     }\n      //   };\n      // });\n    };\n  }\n  async getHistData() {\n    const list = await new Promise();\n    return {\n      bars: [],\n      meta: { noData: false },\n    };\n  }\n  /**\n   * 初始化图表\n   */\n  initTradingView = () => {\n    if (!this.datafeed) {\n      return;\n    }\n    const { currentPeriod, symbol } = this.props;\n    const { time: interval, chartType, interval: inte } = periods[\n      currentPeriod\n    ];\n    const localeMap = {\n      "zh-CN": "zh",\n      "ko-KR": "ko",\n      "en-US": "en",\n    };\n    this.widget = new TradingView({\n      // debug: true, // uncomment this line to see Library errors and warnings in the console\n      // fullscreen: true,\n      custom_css_url: host + "charting_library/static/style.css",\n      symbol,\n      interval,\n      preset: "mobile",\n      container_id: "tv_chart_container",\n      datafeed: this.datafeed,\n      height: "100%",\n      width: "100%",\n      library_path: host + "charting_library/",\n      locale: "zh",\n      loading_screen: {\n        // backgroundColor: "#fff",\n        // foregroundColor: "#fff"\n      },\n      disabled_features: [\n        "left_toolbar",\n        "volume_force_overlay",\n        "create_volume_indicator_by_default",\n        "create_volume_indicator_by_default_once",\n        "format_button_in_legend",\n        "hide_left_toolbar_by_default",\n        "go_to_date",\n        "use_localstorage_for_settings",\n        "save_chart_properties_to_local_storage",\n        "main_series_scale_menu",\n        "show_logo_on_all_charts",\n        "header_settings",\n        "timeframes_toolbar",\n        "chart_property_page_background",\n        "timeframes_toolbar",\n        "compare_symbol",\n        "go_to_date",\n        "header_chart_type", // k线样式\n        "header_compare",\n        "header_interval_dialog_button",\n        "header_screenshot", // 截图\n        "header_symbol_search",\n        "header_undo_redo",\n        "show_hide_button_in_legend",\n        "show_interval_dialog_on_key_press",\n        "snapshot_trading_drawings",\n        "symbol_info",\n        "border_around_the_chart",\n        "remove_library_container_border",\n        "header_saveload",\n        "header_resolutions",\n      ],\n      overrides: getOverrides("white"),\n      studies_overrides: {\n        "volume.volume.color.0": "#eb4d5c",\n        "volume.volume.color.1": "#53b987",\n        "volume.volume.transparency": 70,\n        "volume.options.showStudyArguments": !1,\n        "MA Cross.short:plot.color": "#6B3798",\n        "MA Cross.long:plot.color": "#708957",\n      },\n      enabled_features: ["hide_last_na_study_output"],\n      charts_storage_url: "http://saveload.tradingview.com",\n      charts_storage_api_version: "1.1",\n      client_id: "tradingview.com",\n      user_id: "public_user_id",\n      theme: "Light",\n      timezone: "Asia/Shanghai",\n    });\n\n    this.widget.onChartReady(() => {\n      // 辅助线\n      const chart = this.widget.chart();\n      chart.setResolution(inte, () => {});\n      chart.setChartType(chartType);\n\n      // 每当十字线位置改变时，图表库将会调用回调函数。\n      chart.crossHairMoved(({ time }) => {\n        if (!time) {\n          return;\n        }\n        const bars = Object.entries(_cache).sort((a, b) => a[0] - b[0]); //;\n        const index = bars.findIndex((item) => item[1].time === time * 1000);\n        const bar = bars[index]?.[1];\n        // console.log("111", time, bar, _cache);\n        if (bar) {\n          const { minTime, maxTime } = this.state;\n          let show = true;\n          if (minTime && maxTime) {\n            show = bar.time <= maxTime && bar.time >= minTime;\n          }\n          this.setState(\n            {\n              show,\n              bar: bar,\n              prevBar: bars[index - 1]?.[1] || {},\n              minTime: show ? bars[index - 2]?.[1]?.time || 0 : 0,\n              maxTime: show ? bars[index + 2]?.[1]?.time || 0 : 0,\n            },\n            () => {\n              _selectTime = time;\n            }\n          );\n        } else {\n          this.setState({\n            show: false,\n          });\n        }\n      });\n\n      for (let i = 0, l = studys.length; i < l; i++) {\n        chart.createStudy(...studys[i]);\n      }\n    });\n  };\n  componentWillUnmount() {\n    const { currentPeriod, symbol } = this.props;\n    socket.unsubscribe(symbol, currentPeriod);\n  }\n  componentWillReceiveProps(nextProps) {\n    const { currentPeriod, symbol } = nextProps;\n    const { currentPeriod: c, symbol: s } = this.props;\n    const period = periods[currentPeriod];\n    if (!this.widget) {\n      return;\n    }\n\n    if (c !== currentPeriod) {\n      this.widget.chart().setResolution(period.interval, () => {});\n      this.widget.chart().setChartType(period.chartType);\n      _cache = {};\n      socket.unsubscribe(s, periods[c].period);\n    }\n  }\n\n  async componentDidMount() {\n    // onmessage事件\n    socket.onMessage(this.onSocketMessage);\n    this.initDatafeed();\n    // this.initWebSocket();\n    this.initTradingView();\n  }\n\n  render() {\n    const {\n      show,\n      prevBar,\n      bar: { time, close, high, low, open, volume },\n    } = this.state;\n    const pClose = prevBar.close || 0;\n    const num = close - pClose;\n    const percent = ((close - pClose) / close) * 100;\n    return (\n      <Scoped css={styles}>\n        <div className="contract-home-kline">\n          {show ? (\n            <ul className="float-panle">\n              <li>\n                <Text type="date" format="YYYY-MM-DD HH:mm">\n                  {time}\n                </Text>\n              </li>\n              <li>\n                <div>开:</div>\n                <Text type="number">{open}</Text>\n              </li>\n              <li>\n                <div>高:</div>\n                <Text type="number">{high}</Text>\n              </li>\n              <li>\n                <div>低:</div>\n                <Text type="number">{low}</Text>\n              </li>\n              <li>\n                <div>收:</div>\n                <Text type="number">{close}</Text>\n              </li>\n              <li>\n                <div>涨跌额: </div>\n                <span className={num >= 0 ? "green" : "red"}>\n                  {num >= 0 ? "+" : ""}\n                  <Text type="number">{num}</Text>\n                </span>\n              </li>\n              <li>\n                <div>涨跌幅: </div>\n                <span className={percent >= 0 ? "green" : "red"}>\n                  {percent >= 0 ? "+" : ""}\n                  <Text type="number">{percent}</Text>%\n                </span>\n              </li>\n            </ul>\n          ) : null}\n          <div\n            className="kline-percentage"\n            ref={(ref) => (this.percentage = ref)}\n          >\n            111%\n          </div>\n          <div id="tv_chart_container"></div>\n        </div>\n      </Scoped>\n    );\n  }\n}\nimport React from "react";\nimport moment from "moment";\nimport { connect } from "react-redux";\nimport { Scoped } from "kremling";\nimport { TradingView, Datafeed } from "trader-view";\nimport {\n  periods,\n  studys,\n  resolveSymbol,\n  createSymbolInfo,\n  toNumber,\n  getOverrides,\n} from "@/utils/tradingviewHelper";\nimport socket from "@/service/socket";\nimport Text from "@/components/text";\nimport styles from "./index.krem.scss";\n\n// http://localhost:9001\nconst host = process.env.NODE_ENV === "development" ? "/" : "/micro/contract/";\n\n// 暂存所以交易对信息\nlet _cache = {};\nlet _lastBar = null;\nlet _selectTime = "";\n@connect(({ allSymbolsContract: { currentPeriod, symbol } }) => {\n  return {\n    currentPeriod,\n    symbol,\n  };\n})\nexport default class Kline extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n      minTime: 0, // 不在此范围内，弹层将被隐藏\n      maxTime: 0, // 不在此范围内，弹层将被隐藏\n      bar: {}, // 当前选中的bar\n      prevBar: {}, // 当前选中bar的前一个bar\n    };\n  }\n  /**\n   * 初始订阅\n   */\n  async initSub({ symbol, currentPeriod }) {\n    const { period, interval, count } = periods[currentPeriod];\n    await socket.subscribe("subHis", symbol, period, this.from);\n  }\n\n  /**\n   * 监听WebSocket响应\n   * @param msg string\n   */\n  onSocketMessage = (data) => {\n    if (data.subj === "index") {\n      // 更新最后一条数据\n      if (this.onRealtimeCallback) {\n        const bars = Object.entries(_cache).sort((a, b) => a[0] - b[0]); //;\n        const item = bars[bars.length - 1];\n        if (item) {\n          const bar = item[1];\n          bar.close = data.data.Prz;\n          bar.time = item[0] / 1;\n          this.onRealtimeCallback(bar);\n        }\n      }\n    } else if (data.subj === "kline") {\n      const bar = resolveSymbol(data.data);\n      // 存入缓存\n      _cache[bar.time] = bar;\n      _lastBar = { ...bar };\n      // console.log("kline", _lastBar);\n      console.log("put", bar.time);\n      if (this.onRealtimeCallback) {\n        setTimeout(() => {\n          this.onRealtimeCallback(bar);\n        }, 100);\n      }\n    } else if (data.data.Count) {\n      if (this.onHistoryCallback) {\n        const {\n          Sec,\n          PrzOpen,\n          PrzClose,\n          PrzHigh,\n          PrzLow,\n          Volume,\n          Count,\n        } = data.data;\n\n        const { symbol, currentPeriod } = this.props;\n        const { period, interval } = periods[currentPeriod];\n        const list = [];\n\n        for (let i = 0; i < Count; i++) {\n          const bar = {\n            time: Sec[i] * 1000,\n            close: toNumber(PrzClose[i]),\n            high: toNumber(PrzHigh[i]),\n            low: toNumber(PrzLow[i]),\n            open: toNumber(PrzOpen[i]),\n            volume: toNumber(Volume[i]),\n          };\n          list.push(bar);\n          // 存入缓存\n          _cache[bar.time] = bar;\n          if (i === Count - 1) {\n            _lastBar = { ...bar };\n            console.log("last", bar.time);\n          }\n        }\n\n        this.onHistoryCallback(list, {\n          noData: !list.length,\n          nextTime: Sec[Sec.length - 1] * 1000,\n        });\n\n        socket.subscribe("sub", symbol, period);\n      }\n    }\n  };\n\n  /**\n   * 初始化 JS API\n   */\n  initDatafeed() {\n    const { symbol } = this.props;\n\n    this.datafeed = new Datafeed({\n      history: (params) => {\n        return this.getHistData(\n          params.symbol,\n          params.resolution,\n          params.from,\n          params.to,\n          params.firstDataRequest\n        );\n      },\n      time: () => new Promise((resolve) => resolve(1)),\n      config: () =>\n        new Promise((resolve) =>\n          resolve({\n            supports_search: true,\n            supports_group_request: false,\n            supported_resolutions: [\n              ...new Set(periods.map((item) => item.interval)),\n            ],\n            supports_marks: false,\n            supports_timescale_marks: false,\n            supports_time: true,\n          })\n        ),\n      symbols: () =>\n        new Promise((resolve) => resolve(createSymbolInfo(symbol))),\n    });\n\n    this.datafeed.subscribeBars = (\n      symbolInfo,\n      resolution,\n      onRealtimeCallback,\n      subscribeUID,\n      onResetCacheNeededCallback\n    ) => {\n      this.onRealtimeCallback = onRealtimeCallback;\n      this.onResetCacheNeededCallback = onResetCacheNeededCallback;\n    };\n    /**\n     * 解析商品信息\n     */\n    this.datafeed.resolveSymbol = (symbol, onResolve, onError) => {\n      onResolve(createSymbolInfo(symbol));\n    };\n    this.datafeed.getBars = (\n      symbolInfo,\n      resolution,\n      from,\n      to,\n      onHistoryCallback,\n      onErrorCallback,\n      firstDataRequest\n    ) => {\n      this.onHistoryCallback = onHistoryCallback;\n      this.from = from;\n      this.to = to;\n      const { symbol, currentPeriod } = this.props;\n      const { period, interval, count } = periods[currentPeriod];\n      socket.subscribe("subHis", symbol, period, from);\n      // this.initWebSocket().then((res) => {\n      //   res.onopen = () => {\n      //     const { symbol, currentPeriod } = this.props;\n      //     const { period, interval, count } = periods[currentPeriod];\n      //     if (res) {\n      //       res.send(\n      //         subscribe.subHis(\n      //           symbol,\n      //           period,\n      //           from,\n      //           Math.ceil((to - from) / 60 / count)\n      //         )\n      //       );\n      //     }\n      //   };\n      // });\n    };\n  }\n  async getHistData() {\n    const list = await new Promise();\n    return {\n      bars: [],\n      meta: { noData: false },\n    };\n  }\n  /**\n   * 初始化图表\n   */\n  initTradingView = () => {\n    if (!this.datafeed) {\n      return;\n    }\n    const { currentPeriod, symbol } = this.props;\n    const { time: interval, chartType, interval: inte } = periods[\n      currentPeriod\n    ];\n    const localeMap = {\n      "zh-CN": "zh",\n      "ko-KR": "ko",\n      "en-US": "en",\n    };\n    this.widget = new TradingView({\n      // debug: true, // uncomment this line to see Library errors and warnings in the console\n      // fullscreen: true,\n      custom_css_url: host + "charting_library/static/style.css",\n      symbol,\n      interval,\n      preset: "mobile",\n      container_id: "tv_chart_container",\n      datafeed: this.datafeed,\n      height: "100%",\n      width: "100%",\n      library_path: host + "charting_library/",\n      locale: "zh",\n      loading_screen: {\n        // backgroundColor: "#fff",\n        // foregroundColor: "#fff"\n      },\n      disabled_features: [\n        "header_fullscreen_button", // 全屏\n        "property_pages",  // 禁用所有属性页\n        "left_toolbar",\n        "volume_force_overlay",  // 防止重叠\n        "create_volume_indicator_by_default",\n        "create_volume_indicator_by_default_once",\n        "format_button_in_legend",\n        "hide_left_toolbar_by_default",\n        "go_to_date",\n        "use_localstorage_for_settings",\n        "save_chart_properties_to_local_storage",\n        "main_series_scale_menu",\n        "show_logo_on_all_charts",\n        "header_settings",  // 设置\n        "timeframes_toolbar", // 下面的时间\n        "chart_property_page_background",\n        "compare_symbol",\n        "go_to_date",\n        "header_chart_type",\n        "header_compare", // 图标对比\n        "header_interval_dialog_button",\n        "header_screenshot",\n        "header_symbol_search",\n        "header_undo_redo",\n        "show_hide_button_in_legend",\n        "show_interval_dialog_on_key_press",\n        "snapshot_trading_drawings",\n        "symbol_info",\n        "border_around_the_chart",\n        "remove_library_container_border",\n        "header_saveload",\n        "header_resolutions", // 头部时间s\n      ],\n      overrides: getOverrides("white"),\n      studies_overrides: {\n        "volume.volume.color.0": "#eb4d5c",\n        "volume.volume.color.1": "#53b987",\n        "volume.volume.transparency": 70,\n        "volume.options.showStudyArguments": !1,\n        "MA Cross.short:plot.color": "#6B3798",\n        "MA Cross.long:plot.color": "#708957",\n      },\n      enabled_features: ["hide_last_na_study_output"],\n      charts_storage_url: "http://saveload.tradingview.com",\n      charts_storage_api_version: "1.1",\n      client_id: "tradingview.com",\n      user_id: "public_user_id",\n      theme: "Light",\n      timezone: "Asia/Shanghai",\n    });\n\n    this.widget.onChartReady(() => {\n      // 辅助线\n      const chart = this.widget.chart();\n      chart.setResolution(inte, () => {});\n      chart.setChartType(chartType);\n\n      // 每当十字线位置改变时，图表库将会调用回调函数。\n      chart.crossHairMoved(({ time }) => {\n        if (!time) {\n          return;\n        }\n        const bars = Object.entries(_cache).sort((a, b) => a[0] - b[0]); //;\n        const index = bars.findIndex((item) => item[1].time === time * 1000);\n        const bar = bars[index]?.[1];\n        // console.log("111", time, bar, _cache);\n        if (bar) {\n          const { minTime, maxTime } = this.state;\n          let show = true;\n          if (minTime && maxTime) {\n            show = bar.time <= maxTime && bar.time >= minTime;\n          }\n          this.setState(\n            {\n              show,\n              bar: bar,\n              prevBar: bars[index - 1]?.[1] || {},\n              minTime: show ? bars[index - 2]?.[1]?.time || 0 : 0,\n              maxTime: show ? bars[index + 2]?.[1]?.time || 0 : 0,\n            },\n            () => {\n              _selectTime = time;\n            }\n          );\n        } else {\n          this.setState({\n            show: false,\n          });\n        }\n      });\n\n      for (let i = 0, l = studys.length; i < l; i++) {\n        chart.createStudy(...studys[i]);\n      }\n    });\n  };\n  componentWillUnmount() {\n    const { currentPeriod, symbol } = this.props;\n    socket.unsubscribe(symbol, currentPeriod);\n  }\n  componentWillReceiveProps(nextProps) {\n    const { currentPeriod, symbol } = nextProps;\n    const { currentPeriod: c, symbol: s } = this.props;\n    const period = periods[currentPeriod];\n    if (!this.widget) {\n      return;\n    }\n\n    if (c !== currentPeriod) {\n      this.widget.chart().setResolution(period.interval, () => {});\n      this.widget.chart().setChartType(period.chartType);\n      _cache = {};\n      socket.unsubscribe(s, periods[c].period);\n    }\n  }\n\n  async componentDidMount() {\n    // onmessage事件\n    socket.onMessage(this.onSocketMessage);\n    this.initDatafeed();\n    // this.initWebSocket();\n    this.initTradingView();\n  }\n\n  render() {\n    const {\n      show,\n      prevBar,\n      bar: { time, close, high, low, open, volume },\n    } = this.state;\n    const pClose = prevBar.close || 0;\n    const num = close - pClose;\n    const percent = ((close - pClose) / close) * 100;\n    return (\n      <Scoped css={styles}>\n          <div\n            className="kline-percentage"\n            ref={(ref) => (this.percentage = ref)}\n          >\n            111%\n          </div>\n          <div id="tv_chart_container"></div>\n        </div>\n      </Scoped>\n    );\n  }\n}\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('// service/socket.js\nimport { tickerSymbol, periods } from "@/utils/tradingviewHelper";\nlet ws = "wss://XXX/market";\nlet index = 1;\nlet socket = null;\nlet onMessageFn = null;\nlet dispatch = null;\nlet state = null;\nlet timer = null;\nlet subQueue = []; // 订阅队列\n\nexport const subscribeTypeMap = {\n  sub: (symbol, period) =>\n    JSON.stringify({\n      req: "Sub",\n      rid: `${++index}`,\n      args: [`kline_${period}_GMEX_CI_${symbol}`],\n      expires: +new Date(),\n    }),\n  unSub: (symbol, period, all = true) =>\n    JSON.stringify({\n      req: "UnSub",\n      rid: `${++index}`,\n      args: all\n        ? [`kline_${period}_GMEX_CI_${symbol}`, `GMEX_CI_${symbol}`]\n        : [`GMEX_CI_${symbol}`],\n      expires: +new Date(),\n    }),\n  subHis: (symbol, period, Sec) =>\n    JSON.stringify({\n      req: "GetHistKLine",\n      rid: `${++index}`,\n      args: {\n        Sym: `GMEX_CI_${symbol}`,\n        Typ: period,\n        Sec: Sec,\n        Offset: 0,\n        Count: 10000000,\n      },\n      expires: +new Date(),\n    }),\n};\n\nconst throwErr = () => {\n  throw "先执行service/socket.js的run方法";\n};\n/**\n * 提供给外界使用\n * @param {*} fn\n */\nexport const onMessage = (fn) => {\n  if (socket) {\n    onMessageFn = fn;\n  } else {\n    throwErr();\n  }\n};\n\n/**\n * 启动，初始化\n */\nexport const run = (d, s) =>\n  new Promise(function (resolve, reject) {\n    if (socket) {\n      const { readyState, OPEN, CLOSED, CLOSING } = socket;\n      if (readyState === OPEN) {\n        resolve(socket);\n      } else if (readyState === CLOSING || readyState === CLOSED) {\n        socket = new WebSocket(ws);\n      }\n    } else {\n      socket = new WebSocket(ws);\n    }\n    // 给重连时使用\n    dispatch = d;\n    state = s;\n    // 进入正常逻辑\n    const {\n      allSymbolsContract: { currentPeriod, symbol },\n    } = state;\n    const { period } = periods[currentPeriod];\n\n    socket.onmessage = (e) => {\n      try {\n        const data = JSON.parse(e.data);\n        // 对外提供onmessage方法\n        if (onMessageFn) {\n          onMessageFn(data);\n        }\n        // 存储数据\n        if (data.subj === "index") {\n          dispatch({\n            type: "global/updateState",\n            state: {\n              kline: tickerSymbol(data.data),\n            },\n          });\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    /**\n     * 链接出错\n     */\n    socket.onerror = (e) => {\n      reject(e);\n    };\n    /**\n     * 订阅k线\n     */\n    socket.onopen = () => {\n      // 链接打开成功\n      resolve(socket);\n      /**\n       * 大部分页面都会使用，所以全局开启订阅\n       */\n      socket.send(\n        JSON.stringify({\n          req: "Sub",\n          rid: `${++index}`,\n          expires: Date.now() + 500 + 30000,\n          args: ["index_GMEX_CI_BTC", "__slow__"],\n        })\n      );\n    };\n  });\n\n/**\n * 连接成功后，发送订阅队列\n * 调用之前必需保证连接成功\n */\nconst send = (resolve) => {\n  for (let subString of subQueue) {\n    socket.send(subString);\n  }\n  resolve(socket);\n  // 订阅成功后清除对列\n  subQueue = [];\n};\nexport const subscribe = (sub, ...args) =>\n  new Promise(function (resolve, reject) {\n    // 订阅的字符串\n    subQueue.push(subscribeTypeMap[sub] ? subscribeTypeMap[sub](...args) : sub);\n    if (socket) {\n      const { readyState, OPEN, CLOSED, CLOSING } = socket;\n\n      // 连接成功\n      if (readyState === OPEN) {\n        send(resolve);\n      } else if (readyState === CLOSED || readyState === CLOSING) {\n        // 连接关闭\n        if (dispatch && state) {\n          run(dispatch, state)\n            .then(() => {\n              send(resolve);\n            })\n            .catch(reject);\n        } else {\n          throwErr();\n        }\n      } else {\n        // 链接中\n        timer = setInterval(() => {\n          /**\n           * 开启定时器检测状态\n           * 连接成功后关闭定时器并订阅所有订阅\n           */\n          const { OPEN, readyState } = socket;\n          if (OPEN === readyState) {\n            clearInterval(timer);\n            timer = null;\n            send(resolve);\n          }\n        }, 100);\n      }\n    } else {\n      throwErr();\n    }\n  });\n\n/**\n * 取消订阅，在使用之前保证连接成功\n * @param {*} sub\n * @param  {...any} args\n */\nexport const unsubscribe = (...args) => {\n  if (socket) {\n    const subString = subscribeTypeMap.unSub(...args);\n    socket.send(subString);\n  } else {\n    throwErr();\n  }\n};\nexport default { run, onMessage, subscribe, unsubscribe };\n')])])]),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("// root.component.js\nasync componentDidMount() {\n  const { store } = this.props;\n  await socket.run(store.dispatch, store.getState());\n}\n")])])])])}),[],!1,null,null,null);n.default=o.exports}}]);