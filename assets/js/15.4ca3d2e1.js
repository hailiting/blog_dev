(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{382:function(e,t,n){e.exports=n.p+"assets/img/a.886d6ddd.jpeg"},383:function(e,t,n){e.exports=n.p+"assets/img/b.ebfcbffe.gif"},537:function(e,t,n){"use strict";n.r(t);var a=n(44),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"浅谈-indexdb-浏览器本地数据库数据存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浅谈-indexdb-浏览器本地数据库数据存储"}},[e._v("#")]),e._v(" 浅谈 IndexDB：浏览器本地数据库数据存储")]),e._v(" "),a("ul",[a("li",[e._v("Web SQL Database【多个浏览器已然不支持】")]),e._v(" "),a("li",[e._v("IndexDB 是非关系型数据库")])]),e._v(" "),a("h2",{attrs:{id:"数据库的一些概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库的一些概念"}},[e._v("#")]),e._v(" 数据库的一些概念")]),e._v(" "),a("h3",{attrs:{id:"_1-关系型数据库与非关系型数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-关系型数据库与非关系型数据库"}},[e._v("#")]),e._v(" 1. 关系型数据库与非关系型数据库")]),e._v(" "),a("ul",[a("li",[e._v("关系型数据库 [更稳重]")])]),e._v(" "),a("ul",[a("li",[e._v("对一致性要求严格，例如要写 100 个数据，前 99 个成功，最后一个失败了，此时事务会回滚到最初状态，这样保证事务结束和开始存储数据处于一致状态。这样的特性非常适合银行这种对数据一致性要求非常高的场景，但同时也牺牲了一部分性能。")])]),e._v(" "),a("ul",[a("li",[e._v("非关系型数据库 [更灵活]")])]),e._v(" "),a("ul",[a("li",[e._v("对一致性要求不高，对性能要求偏高【读写频繁】")]),e._v(" "),a("li",[e._v("非关系型数据库的数据结构不固定，容易扩展")])]),e._v(" "),a("h3",{attrs:{id:"_2-数据库中的事务-transaction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库中的事务-transaction"}},[e._v("#")]),e._v(" 2. 数据库中的事务 - transaction")]),e._v(" "),a("p",[e._v("数据库的事务(transition)，我们可以理解为对数据库的操作，而且专指一个序列上的操作。\neg: 银行转账：一个账户少了钱然后另一个账户钱多了，这两个操作要么都执行，要么都不执行。像这种操作可看成一个事务。\n事务的提出主要是为了保证并发情况下保持数据一致性。")]),e._v(" "),a("p",[e._v("关系型数据库中的事务具有下面 4 个基本特征【ACID 特性】：")]),e._v(" "),a("ol",[a("li",[e._v("原子性(Atomicity): 事务中的所有操作作为一个整体提交或回滚；")]),e._v(" "),a("li",[e._v("一致性(Consistemcy): 事务完成时，数据必须是一致的，以保证数据的无损；")]),e._v(" "),a("li",[e._v("隔离性(Isolation): 对数据进行修改的多个事务是彼此隔离的；")]),e._v(" "),a("li",[e._v("持久化(Durability): 事务完成后，它对系统的影响是永久的，该修改即使出现系统故障也将一直保留")])]),e._v(" "),a("h3",{attrs:{id:"_3-了解数据库中的游标-cursor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-了解数据库中的游标-cursor"}},[e._v("#")]),e._v(" 3. 了解数据库中的游标 - cursor")]),e._v(" "),a("p",[e._v("现实世界的游标卡尺，有刻度，有区域：\n"),a("img",{attrs:{src:n(382),alt:"游标卡尺"}}),e._v("\n数据库中的游标其实也相似。内存条本质上就像一把尺子，我们可以想象上面有很多刻度，然后内存大小就是由这些刻度一个一个堆砌起来的。数据库的事务为了保证数据可以回滚，显然需要一片内存区域存放即将受影响的数据，这个内存区域中的虚表就是数据库的“游标”。\n和现实世界的游标卡尺相映射的是：一个刻度表示一行数据，游标就是尺子上的一片区域，想要获取数据库一行一行数据，可以遍历这个游标就好")]),e._v(" "),a("h3",{attrs:{id:"_4-数据库中的锁-lock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据库中的锁-lock"}},[e._v("#")]),e._v(" 4. 数据库中的锁 - lock")]),e._v(" "),a("p",[e._v("数据库中的“锁”是保证高并发时数据的一致性的一种机制。也就是执行多线程时用于强制限制资源访问。")]),e._v(" "),a("h2",{attrs:{id:"实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例"}},[e._v("#")]),e._v(" 实例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('// html\n<form id="form">\n  <p>项目名称：<input required name="name" type="text" autocomplete="off"></p>\n  <p>开始时间：<input required name="begin" type="date"></p>\n  <p>结束时间：<input required name="end" type="date"></p>\n  <p>参与人员：<input required name="person" type="text" autocomplete="off" placeholder="多人空格分开"></p>\n  <p>补充说明：<textarea rows="5" placeholder="非必填" name="remark"></textarea></p>\n  <p><input type="submit" value="确定创建"></p>\n</form>\n<div id="result" class="result">\n  <table>\n    <thead>\n      <tr>\n        <th>项目名称</th>\n        <th>开始时间</th>\n        <th>结束时间</th>\n        <th>参与人员</th>\n        <th>补充说明</th>\n        <th width="30">操作</th>\n      </tr>\n    </thead>\n    <tbody>\n    </tbody>\n  </table>\n  <div id="status" class="status">\n    加载中...\n  </div>\n</div>\n\x3c!-- 列表数据模板 --\x3e\n  <script id="tplList" type="text/template">\n    <tr>\n      <td data-key="name" data-id="$id$" contenteditable="plaintext-only">$name$</td>\n      <td data-key="begin" data-id="$id$" contenteditable="plaintext-only">$begin$</td>\n      <td data-key="end" data-id="$id$" contenteditable="plaintext-only">$end$</td>\n      <td data-key="person" data-id="$id$" contenteditable="plaintext-only">$person$</td>\n      <td data-key="remark" data-id="$id$" contenteditable="plaintext-only">$remark$</td>\n      <td><a href="javascript:;" role="button" class="jsListDel" data-id="$id$">删除</a></td>\n    </tr>\n  <\/script>\n\x3c!-- js代码 --\x3e\n<script>\n  <script>\n    (function () {\n      var eleForm = document.querySelector("#form");\n      var eleTbody = document.querySelector("#result tbody");\n      var eleStatus = document.getElementById("status");\n      // 模板字符内容\n      var strTplList = document.getElementById("tplList").innerHTML;\n\n      var logError = function (error) {\n        eleStatus.style.display = "block";\n        eleStatus.innerHTML = "<span class=\'error\'>" + error + "</span>";\n      }, logInfo = function (info) {\n        eleStatus.style.display = "block";\n        eleStatus.innerHTML = "<span class=\'info\'>" + info + "</span>";\n      }\n      String.prototype.temp = function (obj) {\n        return this.replace(/\\$\\w+\\$/gi, function (matchs) {\n          return obj[matchs.replace(/\\$/g, "")] || ""\n        })\n      }\n      // 使用的数据库名称\n      var dbName = "project";\n      // 版本\n      var version = 1;\n      // 数据库数据结果\n      var db;\n      // 打开数据库\n      var DBOpenRequest = window.indexedDB.open(dbName, version);\n      // 如果数据库打开失败\n      DBOpenRequest.onerror = function (event) {\n        logError("数据库打开失败");\n      };\n      DBOpenRequest.onsuccess = function (event) {\n        db = DBOpenRequest.result;\n        method.show();\n      }\n      // 数据库首次新建或版本比现在的高\n      DBOpenRequest.onupgradeneeded = function (event) {\n        var db = event.target.result;\n        db.onerror = function (event) {\n          logError("数据库打开失败");\n        }\n        // 创建一个数据库存储对象\n        var objectStore = db.createObjectStore(dbname, {\n          keyPath: "id",\n          autoIncrement: true,\n        });\n        // 定义存储对象的数据项\n        objectStore.createIndex("id", "id", {\n          unique: true,\n        })\n        objectStore.createIndex("name", "name")\n        objectStore.createIndex("begin", "begin")\n        objectStore.createIndex("end", "end")\n        objectStore.createIndex("person", "person");\n        objectStore.createIndex("remark", "remark");\n      };\n      var method = {\n        add: function (newItem) {\n          var transaction = db.transaction([dbName], "readwrite");\n          // 打开已存储的数据对象\n          var objectStore = transaction.objectStore(dbName);\n          // 添加到数据对象中；\n          var objectStoreRequest = objectStore.add(newItem);\n          objectStoreRequest.onsuccess = function (event) {\n            method.show();\n          }\n        },\n        edit: function (id, data) {\n          // 编辑数据\n          var transaction = db.transaction([dbName], "readwrite");\n          var objectStore = transaction.objectStore(dbName);\n          // 获得存储对应键的存储对象\n          var objectStoreRequest = objectStore.get(id);\n          // 获取成功后替换当前数据\n          objectStoreRequest.onsuccess = function (event) {\n            // 当前数据\n            var myRecord = objectStoreRequest.result;\n            for (var key in data) {\n              if (typeof myRecord[key] != "undefined") {\n                myRecord[key] = data[key];\n              }\n            }\n            // 更新数据库存储数据\n            objectStore.put(myRecord);\n          }\n        },\n        del: function (id) {\n          var objectStore = db.transaction([dbName], "readwrite").objectStore(dbName);\n          // 删除\n          var objectStoreRequest = objectStore.delete(id);\n          // 删除成功后\n          objectStoreRequest.onsuccess = function () {\n            method.show();\n          }\n        },\n        show: function () {\n          // 最终展示的HTML数据\n          var htmlProjectList = "";\n          // 打开对象存储，获得游标列表\n          var objectStore = db.transaction(dbName).objectStore(dbName);\n          objectStore.openCursor().onsuccess = function (event) {\n            var cursor = event.target.result;\n            if (cursor) {\n              htmlProjectList = htmlProjectList + strTplList.temp(cursor.value);\n              cursor.continue();\n            } else {\n              logInfo("");\n              eleTbody.innerHTML = htmlProjectList;\n              if (htmlProjectList == "")\n                logInfo("暂无数据");\n            }\n          }\n        }\n      }\n      // 表单提交新增\n      eleForm.addEventListener("submit", function (event) {\n        event.preventDefault();\n        var formData = {};\n        [].slice.call(this.querySelectorAll("input, textarea")).forEach(function (ele) {\n          if (ele.name)\n            formData[ele.name] = ele.value;\n        })\n        // 添加新的数据\n        method.add(formData);\n        // this.reset();\n      });\n      // 编辑事件\n      eleTbody.addEventListener("focusout", function (event) {\n        var eleTd = event.target;\n        var id = eleTd && eleTd.getAttribute("data-id");\n        if (!id || !/td/.test(eleTd.tagName.toLowerCase())) { return }\n        // 这是要替换的数据\n        var data = {\n          id: id * 1\n        };\n        // 获得现在的数据\n        [].slice.call(eleTd.parentElement.querySelectorAll("td[data-key]")).forEach(function (td) {\n          var key = td.getAttribute("data-key");\n          var value = td.innerText || td.textContent || "";\n          data[key] = value;\n        })\n        method.edit(+id, data);\n      })\n      // 删除事件\n      eleTbody.addEventListener("click", function (event) {\n        var eleBtn = event.target, id = "";\n        if (eleBtn && eleBtn.classList.contains("jsListDel") && (id = eleBtn.getAttribute("data-id"))) {\n          method.del(id * 1);\n          event.preventDefault();\n        }\n      })\n    })\n      ()\n  <\/script>\n')])])]),a("p",[a("img",{attrs:{src:n(383),alt:"IndexDB成品"}})])])}),[],!1,null,null,null);t.default=r.exports}}]);