(window.webpackJsonp=window.webpackJsonp||[]).push([[310],{733:function(a,s,t){"use strict";t.r(s);var e=t(44),r=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"安装-docker-docker-compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker-docker-compose"}},[a._v("#")]),a._v(" 安装 docker docker-compose")]),a._v(" "),t("h2",{attrs:{id:"第三方库服务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三方库服务"}},[a._v("#")]),a._v(" "),t("a",{attrs:{href:"!https://hub.docker.com"}},[a._v("第三方库服务")])]),a._v(" "),t("h3",{attrs:{id:"设置-docker-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置-docker-镜像"}},[a._v("#")]),a._v(" 设置 docker 镜像")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('// 文件地址：/etc/docker/daemon.json\n// vi path， i 编辑， esc + !eq 保存\n{\n  "regisrey-mirrors": ["https://registry.docker-cn.com"]\n}\n')])])]),t("h3",{attrs:{id:"下载-mongodb-镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#下载-mongodb-镜像"}},[a._v("#")]),a._v(" 下载 mongodb 镜像")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// :4 版本\ndocker pull mongo:4\n")])])]),t("h3",{attrs:{id:"运行-mongo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行-mongo"}},[a._v("#")]),a._v(" 运行 mongo")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("// -d 在后台运行docker指令\n// -p 指定端口\n// docker run --name some-mongo -d mongo:tag\n// 在10050端口映射容器里的27017\nep: docker run -d --name some-mongo -p 10050:27017 mongo:4\n// 指定10050为永久(--parmanent)端口  防火墙方行\nfirewall-cmd --zone=public --add-porrt=10050/tcp --permanent\nfirewall-cmd --reload\n")])])]),t("h3",{attrs:{id:"robo-3t-mongo-图形化的工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#robo-3t-mongo-图形化的工具"}},[a._v("#")]),a._v(" Robo 3T mongo 图形化的工具")]),a._v(" "),t("h2",{attrs:{id:"重启-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重启-docker"}},[a._v("#")]),a._v(" 重启 docker")]),a._v(" "),t("p",[t("code",[a._v("service docker restart")])]),a._v(" "),t("h2",{attrs:{id:"查看本地下载了哪些镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看本地下载了哪些镜像"}},[a._v("#")]),a._v(" 查看本地下载了哪些镜像")]),a._v(" "),t("p",[t("code",[a._v("docker images")])]),a._v(" "),t("h2",{attrs:{id:"查看及停止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看及停止容器"}},[a._v("#")]),a._v(" 查看及停止容器")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看运行中的容器")]),a._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 查看所有容器  包括正在运行和已经停止运行的")]),a._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("ps")]),a._v(" -a\n")])])]),t("p",[a._v("停止容器命令如下")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过id直接关闭容器")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker kill a0fbf4519279")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过容器名称直接关闭容器")]),a._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("kill")]),a._v(" docker-nginx\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过id直接关闭容器 默认等待10s 超时强制关闭")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker stop a0fbf4519279")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 等同于 docker stop -t=10 docker-nginx")]),a._v("\ndocker stop docker-nginx\n")])])]),t("h2",{attrs:{id:"启动停止的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动停止的容器"}},[a._v("#")]),a._v(" 启动停止的容器")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 启动容器可通过容器id或容器名称")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 如果已经启动则忽略")]),a._v("\ndocker start docker-nginx\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 通过容器名称重新启动容器，如果未启动则直接启动，如果已启动则关闭再启动")]),a._v("\ndocker restart docker-nginx\n")])])]),t("h2",{attrs:{id:"搜索镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#搜索镜像"}},[a._v("#")]),a._v(" 搜索镜像")]),a._v(" "),t("p",[t("code",[a._v("docker search nginx")])]),a._v(" "),t("h2",{attrs:{id:"获取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像"}},[a._v("#")]),a._v(" 获取镜像")]),a._v(" "),t("p",[a._v("搜索到所需要的镜像之后可使用如下命令将镜像拉取到本地，类似于 git 拉取代码")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拉取指定版本")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# docker pull nginx:xxx")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# 拉取最新版本镜像 等价于 docker pull nginx:latest")]),a._v("\ndocker pull nginx\n")])])]),t("h2",{attrs:{id:"创建并启动容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建并启动容器"}},[a._v("#")]),a._v(" 创建并启动容器")]),a._v(" "),t("p",[a._v("镜像拉取成功后，使用下面命令启动 nginx 容器，容器内部的 80 端口已映射到本机的 8080 端口，所以启动成功后可以使用"),t("code",[a._v("http://localhost:8080/")]),a._v("访问 docker 容器内部 nginx80 端口映射的地址")]),a._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -d 后台运行")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# -p 8080:80 宿主机的8080端口映射到docker内部的80端口")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# --name docker-nginx 启动后的容器名称为 docker-nginx")]),a._v("\ndocker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8080")]),a._v(":80 --name docker-nginx nginx\n")])])])])}),[],!1,null,null,null);s.default=r.exports}}]);