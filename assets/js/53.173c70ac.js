(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{451:function(e,n,t){"use strict";t.r(n);var a=t(44),s=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#知识点"}},[e._v("#")]),e._v(" 知识点")]),e._v(" "),t("ol",[t("li",[e._v("使用"),t("code",[e._v("X-Tag")]),e._v("封装点赞插件"),t("code",[e._v("<x-praise></x-praise>")]),e._v(";")]),e._v(" "),t("li",[e._v("使用 Gulp 编译 koa2 源代码并能监控源代码变化自动编译；")]),e._v(" "),t("li",[e._v("使用 webpack 配置上线版本、开发版本配置文件，并能监控文件的变化自动刷新浏览器；")]),e._v(" "),t("li",[e._v("使用 webpack 能够对 css、js 进行编译压缩打包合并并生成 MD5;")]),e._v(" "),t("li",[e._v("去掉 System.js，利用 webpack 进行文件引用（同时提取公共文件成独立 JS 包）")]),e._v(" "),t("li",[e._v("将编译后的文件能按照 Chunk 规律分发静态文件并编译进 Swig;")])]),e._v(" "),t("h2",{attrs:{id:"x-tag是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#x-tag是什么"}},[e._v("#")]),e._v(" "),t("code",[e._v("X-Tag")]),e._v("是什么")]),e._v(" "),t("p",[e._v("他是一个 JavaScript 库，具体用法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// html\n<body>\n  <x-clock></x-clock>\n</body>\n<script src="./x-tag-raw.js"><\/script>\n<script src="index.js"><\/script>\n// index.js   create   register\nxtag.create("x-clock", class extends XTagElement{\n  connectedCallback(){\n    this.start();\n  }\n  start(){\n    this.update();\n    this._interval = setInterval(()=>this.update(), 1000);\n  }\n  stop(){\n    this._interval = clearInterval(this._data.interval);\n  }\n  update(){\n    this.textContent = new Date().toLocaleTimeString();\n  }\n  "tap::event"(){\n    if(this._interval) this.stop();\n    else this.start();\n  }\n})\n')])])]),t("h2",{attrs:{id:"gulp-基于流-stream-的自动化构建工具"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gulp-基于流-stream-的自动化构建工具"}},[e._v("#")]),e._v(" "),t("code",[e._v("gulp")]),e._v("：基于流（stream）的自动化构建工具")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('npm i gulp-cli -g\nmkdir gulpdir\ncd gulpdir\nnpm i --save-dev gulp\nnpx -p touch nodetouch gulpfile.js\ngulp --help\n\n// gulpfile.js\nconst {src, dest} = require("gulp");\nfunction copy(){\n  return src("input/*.js").pipe(dest("output/"));\n}\nexport.copy = copy\n')])])]),t("h4",{attrs:{id:"gulp-babel-8-babel-7"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gulp-babel-8-babel-7"}},[e._v("#")]),e._v(" gulp-babel 8 + babel 7")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('> gulp-babel 8 对应babel 7\n> npm install --save-dev gulp-babel @babel/core @babel/preset-env\n> npm install --save-dev @babel/plugin-transform-runtime  // 防止 regeneratorRuntime is not defined\n> npm install --save @babel/runtime\n\n> gulp-babel 7 对应babel 6\n> npm install --save-dev gulp-babel@7 babel-core babel-preset-env\nconst gulp = require("gulp");\nconst babel = require("gulp-babel");\n\ngulp.task("praise", () => {\n  return gulp.src(["app/**", "!app/views/**"])\n    .pipe(babel(\n      {\n        "presets": [\n          [\n            "@babel/preset-env",\n            {\n              "targets": {\n                "node": "4"\n              }\n            }\n          ]\n        ],\n        "plugins": [\n          "@babel/plugin-transform-runtime"\n        ]\n      }\n    ))\n    .pipe(gulp.dest("./build"))\n})\n\ngulp.task("default", gulp.series("praise", () => {\n  gulp.watch(["app/**", "!app/views/**"], gulp.series("praise"))\n}));\n')])])]),t("h2",{attrs:{id:"webpack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[e._v("#")]),e._v(" "),t("code",[e._v("webpack")])]),e._v(" "),t("p",[e._v("better-npm-run package.json 处理")]),e._v(" "),t("h3",{attrs:{id:"常见的-webpack-参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的-webpack-参数"}},[e._v("#")]),e._v(" 常见的 webpack 参数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("webpack -- config xxx.js // 使用另一份配置文件（比如webpack.config2.js）来打包\nwebpack --watch // 监听变动并自动打包\nwebpack -p  // 压缩混淆脚本\nwebpack -d  // 生成map映射文件，告知哪些模块被最终打包到哪里\nwebpack --progress // 显示进度条\nwebpack --color  // 显示颜色\n")])])]),t("h4",{attrs:{id:"webpack-livereload-plugin监控文件变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-livereload-plugin监控文件变化"}},[e._v("#")]),e._v(" "),t("code",[e._v("webpack-livereload-plugin")]),e._v("监控文件变化")]),e._v(" "),t("p",[e._v("需要谷歌的 livereload")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("# for webpack 4\nnpm install --save-dev webpack-livereload-plugin\n# for webpack 3\nnpm install --save-dev webpack-livereload-plugin@1\n\n\n// webpack.config.js\nvar LiveReloadPlugin = require('webpack-livereload-plugin');\nmodule.exports = {\n  plugins: [\n    new LiveReloadPlugin(options)\n  ]\n}\n")])])]),t("h4",{attrs:{id:"babel-loader"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-loader"}},[e._v("#")]),e._v(" "),t("code",[e._v("babel-loader")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("npm install -D babel-loader @babel/core @babel/preset-env webpack\nnpm install -D @babel/plugin-transform-runtime\nnpm install --save @babel/runtime\nmodule: {\n  rules: [\n    {\n      test: /\\.m?js$/,\n      exclude: /(node_modules|bower_components)/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: ['@babel/preset-env'],\n          plugins: ['@babel/plugin-transform-runtime']\n        }\n      }\n    }\n  ]\n}\n")])])]),t("h4",{attrs:{id:"extract-text-webpack-plugin-last"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#extract-text-webpack-plugin-last"}},[e._v("#")]),e._v(" "),t("code",[e._v("extract-text-webpack-plugin-last")])]),e._v(" "),t("p",[e._v("打包 css")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// webpack v4\nnpm install --save-dev extract-text-webpack-plugin@4.0.0-beta.0;\n// 用法\nconst ExtractTextPlugin = require("extract-text-webpack-plugin");\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nnpm install --save-dev style-loader css-loader\nmodule: {\n  rules: [\n    {\n      test: /\\.css$/,\n      use: ExtractTextPlugin.extract({\n        fallback: "style-loader",\n        use: "css-loader"\n      })\n    }\n  ]\n},\nplugins: [\n  new ExtractTextPlugin("styles.css") // 路径与名称\n]\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nnpm install --save-dev style-loader css-loader sass-loader node-sass\nmodules: {\n  rules: [\n    {\n      test: /\\.scss$/,\n      use: ExtractTextPlugin.extract({\n        fallback: "style-loader",\n        use: [\n          {\n            loader: "css-loader",\n            options: {\n              url: false,\n              sourceMap: true\n            }\n          },\n          {\n            loader: "sass-loader",\n            options: {\n              sourceMap: true\n            }\n          }\n        ]\n      })\n    }\n  ]\n}\n')])])]),t("h4",{attrs:{id:"cssnano"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cssnano"}},[e._v("#")]),e._v(" cssnano")]),e._v(" "),t("p",[e._v("对 css 做多方面的压缩，以确保最终生成的文件对生产环境来说体积最小")]),e._v(" "),t("h4",{attrs:{id:"optimize-css-assets-webpack-plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optimize-css-assets-webpack-plugin"}},[e._v("#")]),e._v(" "),t("code",[e._v("optimize-css-assets-webpack-plugin")])]),e._v(" "),t("p",[e._v("打包压缩")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('npm install --save-dev optimize-css-assets-webpack-plugin\n// 使用\nvar OptimizeCssAssertsPlugin = require("optimize-css-assets-webpack-plugin");\n...\nplugins: [\n  new ExtractTextPlugin("styles.css")\n  new OptimizeCssAssetsPlugin({\n    assetNameRegExp: /\\.optimize\\.css$/g,\n    cssProcessor: require("cssnano"),\n    cssProcessorPluginOptions: {\n      preset: ["default", {discardComments: {removeAll: true}}]\n    },\n    canPrint: true\n  })\n]\n...\n')])])]),t("h4",{attrs:{id:"splitchunksplugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#splitchunksplugin"}},[e._v("#")]),e._v(" "),t("code",[e._v("SplitChunksPlugin")])]),e._v(" "),t("p",[e._v("CommonsChunkPlugin 主要是提取第三方库和公共模块，避免首屏加载 bundle 文件或按需加载的 bundle 文件体积过大")]),e._v(" "),t("h5",{attrs:{id:"第三方库-自定义公共模块-webpack运行文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三方库-自定义公共模块-webpack运行文件"}},[e._v("#")]),e._v(" "),t("code",[e._v("第三方库")]),e._v(","),t("code",[e._v("自定义公共模块")]),e._v(","),t("code",[e._v("webpack运行文件")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('splitChunks: {\n  chunks: "async",\n  minSize: 30000, // 30kb 模块的最小体积\n  minChunk: 1, // 模块的最小被引用次数\n  maxAsyncRequests: 5,  // 按需加载的最大并行请求数\n  maxInitialRequests: 3, // 一个入口最大并行请求数\n  automaticNameDelimiter: "~", // 文件名的连接符\n  name: true,\n  cacheGroups: {\n    vendors: {\n      test: /[\\\\/]node_modules[\\\\/]/,\n      priority: -10\n    },\n    default: {\n      minChunks: 2,\n      priority: -20,\n      reuseExistingChunk: true\n    }\n  }\n}\n')])])]),t("h4",{attrs:{id:"html-webpack-plugin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html-webpack-plugin"}},[e._v("#")]),e._v(" "),t("code",[e._v("html-webpack-plugin")])]),e._v(" "),t("p",[e._v("主要有两个作用")]),e._v(" "),t("ul",[t("li",[t("ol",[t("li",[e._v("为 html 文件中引入的外部资源如 script、link 动态添加每次 compile 后的 hash，防止引用缓存的外部文件问题")])])]),e._v(" "),t("li",[t("ol",{attrs:{start:"2"}},[t("li",[e._v("可以生成创建 html 入口文件，比如单页面可以生成一个 html 文件认可，配置 N 个 html-webpack-plugin 就可以生成 N 个页面入口")])])])]),e._v(" "),t("h5",{attrs:{id:"常见的配置作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常见的配置作用"}},[e._v("#")]),e._v(" 常见的配置作用")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('plugins: [\n  new HtmlWebpackPlugin({ // 打包输出html\n    title: "my app", // 生成html的title\n    filename: "index.html", // 输出的html文件名称\n\n    /**\n    * template: 根据自己的指定模板文件来生成特定的html文件，这里的模板类型可以是任\n    * 意你喜欢的模板，如 html, jade, ejs, hbs等。但要注意，使用自定义模板文件时，\n    * 需要提前安装对应的loader,否则webpack不能正确解析。\n    */\n    template: "index.html",  // html模板所在的文件路径\n\n    /**\n    * 注入选项，有四个选项值 true, body, head, false\n    * 1, true, 默认值，script标签位于html文件的body底部\n    * 2, body, script标签位于html文件body底部 （同true）\n    * 3, head: script标签位于head标签内\n    * 4, false: 不能插入删除的js,只是单纯的html文件\n    */\n    inject: true,\n    favicon: "./favicon.svg", // 给生成的html加favicon，值为favicon文件所在目录\n    minify: { // 压缩HTML文件\n      caseSensitive: true, // 是否对大小写敏感，默认false\n      collapseBooleanAttributes: true, // 是否简写boolean格式的属性 如：disabled = "disabled" 简写为disabled，默认为false\n      removeComments: true, // 移除HTML中的注释\n      collapseWhitespace: true, // 删除空白符和换行符\n      minifyCSS: true, // 压缩内联css\n      minifyJS: true, // 压缩html里的js 使用 uglify-js 进行压缩\n      preventAttributesEscaping: true, //防止转义属性值\n      removeAttributeQuotes: true, // 是否移除属性里的引号\n      removeCommentsFromCDATA: true, // 是否从脚本和样式删除注释\n      removeEmptyAttributes: true, // 是否删除空属性\n      removeOptionalTags: false, // true时 生成的html没有body和head, html也未合并\n      removeRedundantAttributes: true, // 删除多余属性\n      removeScriptTypeAttributes: true, // 删除script的属性类型["text/javascript"]\n      removeStyleLinkTypeAttribute: true, // 删除style 的 text/css type属性\n      useShortDoctype: true, // 使用短的文档类型，默认为false\n      hash: true, // 给文件加hash\n      cache: true, // 内容变化的时候生成一个新的文件\n      showErrors: true, // 定位错误\n\n      /**\n      * chunks 主要用于多入口文件，编译后生成多个打包后的文件\n      * entry: {\n      *   index: path.resolve(__dirname, "./src/index.js"),\n      *   devor: path.resolve(__dirname, "./src/devor.js"),\n      *   main: path.resolve(__dirname, "./src/main.js"),\n      * }\n      * plugins: [\n      *   new httpWebpackPlugin({\n      *     chunks: [\'index\', \'main\'], // 等同于 excludeChunks: ["devor.js"]\n      *   })\n      * ]\n      * 编译后生成的文件\n      * <script type=text/javascript src="index.js"><\/script>\n      * <script type=text/javascript src="main.js"><\/script>\n      *\n      */\n      chunks: [\'index\', \'main\'], //\n    },\n  })\n]\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('npm i --save-dev html-webpack-plugin\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\n\nplugins: [\n  ...\n  new HtmlWebpackPlugin({\n    filename: "./views/layout.html",\n    template: "app/views/layout.html"\n  }),\n  new HtmlWebpackPlugin({\n    filename: "./views/index.html",\n    template: "app/views/index.html"\n  })\n]\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);