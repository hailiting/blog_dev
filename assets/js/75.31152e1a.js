(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{477:function(t,i,n){"use strict";n.r(i);var e=n(44),r=Object(e.a)({},(function(){var t=this,i=t.$createElement,n=t._self._c||i;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"自定义-appbar-实现滚动渐变"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义-appbar-实现滚动渐变"}},[t._v("#")]),t._v(" 自定义 AppBar 实现滚动渐变")]),t._v(" "),n("h2",{attrs:{id:"notificationlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notificationlistener"}},[t._v("#")]),t._v(" NotificationListener")]),t._v(" "),n("p",[t._v("利用 NotificationListener 监听子 Widget 滚动时向上发送的 notification")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const NotificationListener({\n  Key key,\n  @required this.child, // 被监听的子widget\n  this.onNotification, // 监听到notification后的回调方法\n})\n")])])]),n("p",[t._v("监听返回值详解")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('class _MyHomePageState extends State<MyHomePage>{\n  @override\n  Widget build(BuildContext context){\n    return Scaffold(\n      body: NotificationListener<ScrollNotification>(\n        onNotification: (ScrollNotification notification){\n          if(notification is ScrollUpdateNotification && notification.depth == 0){\n            // 滚动且是列表滚动的时候[banner忽略] notification.depth  第0个元素滚动的时候\n            ScrollMetrics metrics = notification.metrics;\n            print(metrics.pixels); // 当前位置\n            print(metrics.atEdge); // 是否在顶部或底部\n            print(metrics.axis); // 垂直或水平滚动\n            print(metrics.axisDirection); // 滚动方向是up还是down\n            print(metrics.extentAfter); // 视口底部距离列表底部有多大\n            print(metrics.extentBefore); // 视口顶部距离列表顶部有多大\n            print(metrics.extentInside); // 视口范围内的列表长度\n            print(metrics.maxScrollExtent); // 最大滚动距离， 列表长度-视口长度\n            print(metrics.minScrollExtent); // 最小滚动距离\n            print(metrics.viewportDimension); // 视口长度\n            print(metrics.outOfRange); // 是否越过边界\n            print("----------------------------");\n            return ture;\n          }\n        },\n        child: ListView.builder(\n          itemExtent: 50,\n          itemCount: 50,\n          itemBuilder: (BuildContext context, int index){\n            return ListTile(title: Text(index.toString()));\n          }\n        )\n      )\n    );\n  }\n}\n')])])])])}),[],!1,null,null,null);i.default=r.exports}}]);