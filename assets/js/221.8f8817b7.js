(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{631:function(a,v,t){"use strict";t.r(v);var s=t(44),e=Object(s.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"evm-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-简介"}},[a._v("#")]),a._v(" EVM 简介")]),a._v(" "),t("h2",{attrs:{id:"以太坊虚拟机-evm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#以太坊虚拟机-evm"}},[a._v("#")]),a._v(" 以太坊虚拟机（EVM）")]),a._v(" "),t("ul",[t("li",[a._v("EVM, Ethereum Virtual Machine，以太坊虚拟机。它是以太坊智能合约的运行环境")]),a._v(" "),t("li",[a._v("作为区块验证协议的一部分，参与网络的每个节点都会运行 EVM。他们会检查正在验证的块中列出的交易，并运行由 EVM 中的交易触发的代码")]),a._v(" "),t("li",[a._v("EVM 不仅是沙盒封装的，是完全隔离的，也就是说在 EVM 中运行的代码是无法访问网络、文件系统和其他进程的，甚至智能合约之间的访问也是受限的")]),a._v(" "),t("li",[a._v("合约以字节码的格式（EVM bytecode）存在于区块链上")]),a._v(" "),t("li",[a._v("合约通常以高级语言（solidity）编写，通过 EVM 编译器编译为 字节码，最终通过客户端下载部署到区块链网络中")])]),a._v(" "),t("h2",{attrs:{id:"evm-和账户"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-和账户"}},[a._v("#")]),a._v(" EVM 和账户")]),a._v(" "),t("ul",[t("li",[a._v("以太坊中有两类账户：外部账户和合约账户，它们共用 EVM 中的同一个地址空间")]),a._v(" "),t("li",[a._v("无论账户是否存储代码，这两类账户对 EVM 来说处理方式是完全一样的")]),a._v(" "),t("li",[a._v("每个账户在 EVM 中都有一个键值对形式的持久化存储。其中 key 和 value 的长度都是 256 位，称之为存储空间（storage）")])]),a._v(" "),t("h2",{attrs:{id:"evm-和交易"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-和交易"}},[a._v("#")]),a._v(" EVM 和交易")]),a._v(" "),t("ul",[t("li",[a._v("交易可以看作是从一个账户发送到另一个账户的消息，它可以包含二进制数据（payload）和以太币")]),a._v(" "),t("li",[a._v("如果目标账户是零账户（账户地址为 0），此交易就将创建一个新合约，这个用于创建合约的交易的 payload 会被转换为 EVM 字节码并执行，执行的输出作为合约代码永久存储")])]),a._v(" "),t("h2",{attrs:{id:"evm-和-gas"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-和-gas"}},[a._v("#")]),a._v(" EVM 和 gas")]),a._v(" "),t("ul",[t("li",[a._v("合约被交易触发调用时，指令会在全网的每个节点上执行：这需要消耗算力成本；每个指令的执行都有特定的消耗，gas 就是用来量化表示这个成本消耗")]),a._v(" "),t("li",[a._v("一经创建，每笔交易都按照一定数量的 gas 预付一笔费用，目的是限制执行交易时，gas 将按特定规则逐渐耗尽")]),a._v(" "),t("li",[a._v("EVM 执行交易时，gas 将按特定规则逐渐耗尽")]),a._v(" "),t("li",[a._v("gas price 是交易发送者设置的一个值，作为发送者预付手续费的单价。如果交易执行后还有剩余，gas 会原路返还")]),a._v(" "),t("li",[a._v("无论执行到什么位置，一旦 gas 被耗尽（比如降为负值），将会触发一个"),t("code",[a._v("out-of-gas")]),a._v("异常。当前调用帧（"),t("code",[a._v("call frame")]),a._v("）所做的所有状态修改都将被回滚")])]),a._v(" "),t("h2",{attrs:{id:"evm-数据存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-数据存储"}},[a._v("#")]),a._v(" EVM 数据存储")]),a._v(" "),t("h3",{attrs:{id:"storage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#storage"}},[a._v("#")]),a._v(" Storage")]),a._v(" "),t("ul",[t("li",[a._v("每个账户都有一块持久化的存储空间，称为 storage，这是一个将 256 位字映射到 256 位字的 key-value 存储区，可以理解为合约的数据库")]),a._v(" "),t("li",[a._v("永久存储在区块链中，由于会永久保存合约状态变量，所以读写的 gas 开销也最大")])]),a._v(" "),t("h3",{attrs:{id:"memory-内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memory-内存"}},[a._v("#")]),a._v(" Memory（内存）")]),a._v(" "),t("ul",[t("li",[a._v("每一次消息调用，合约会临时获取一块干净的内存空间")]),a._v(" "),t("li",[a._v("生命周期仅为这个方法执行期间，函数调用后回收，因为仅保存临时变量，故读写 gas 开销较小")])]),a._v(" "),t("h3",{attrs:{id:"stack-栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stack-栈"}},[a._v("#")]),a._v(" Stack（栈）")]),a._v(" "),t("ul",[t("li",[a._v("EVM 不是基于寄存器的，而是基于栈的，因此所有的计算都在一个被称为栈（stack）的区域执行")]),a._v(" "),t("li",[a._v("存放部分局部值类型变量，几乎免费使用的内存，但有数量限制")])]),a._v(" "),t("h2",{attrs:{id:"evm-指令集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#evm-指令集"}},[a._v("#")]),a._v(" EVM 指令集")]),a._v(" "),t("ul",[t("li",[a._v("所有的指令都是针对“256 位的字（"),t("code",[a._v("word")]),a._v("）”，这个基本的数据类型来进行操作")]),a._v(" "),t("li",[a._v("具备常用的算术、位、逻辑和比较操作，也可以做到有条件和无条件的跳转")]),a._v(" "),t("li",[a._v("合约可以访问当前区块的相关属性，比如它的块高度和时间戳")])]),a._v(" "),t("h2",{attrs:{id:"消息调用-message-calls"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息调用-message-calls"}},[a._v("#")]),a._v(" 消息调用（Message Calls）")]),a._v(" "),t("ul",[t("li",[a._v("合约可以通过消息调用的方式来调用其他合约或发生以太币到非合约账户")]),a._v(" "),t("li",[a._v("合约可以决定其内部消息调用中，对于剩余的 gas，应发送和保留多少")]),a._v(" "),t("li",[a._v("如果在内部消息调用时发生"),t("code",[a._v("out-of-gas")]),a._v("异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明；此时只有与该内部消息调用一起发送的 gas 会被消耗掉")])]),a._v(" "),t("h2",{attrs:{id:"委托调用-delegatecall"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#委托调用-delegatecall"}},[a._v("#")]),a._v(" 委托调用（Delegatecall）")]),a._v(" "),t("ul",[t("li",[a._v("一种特殊类型的消息调用")]),a._v(" "),t("li",[a._v("目的地址的代码将在发起调用的合约的上下文中执行，并且 msg.sender 和 msg.value 不变")]),a._v(" "),t("li",[a._v("可以由此实现“库”（library）: 可复用的代码库可以放在一个合约的存储上，通过委托调用引入相应代码")])]),a._v(" "),t("h2",{attrs:{id:"合约的创建和自毁"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合约的创建和自毁"}},[a._v("#")]),a._v(" 合约的创建和自毁")]),a._v(" "),t("ul",[t("li",[a._v("通过一个特殊的消息调用"),t("code",[a._v("create calls")]),a._v("，合约可以创建其他合约（不是简单的调用零地址）")]),a._v(" "),t("li",[a._v("合约代码从区块链上移除的唯一方式是合约在合约地址上的执行自毁操作"),t("code",[a._v("selfdestruct")]),a._v("；合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除")])])])}),[],!1,null,null,null);v.default=e.exports}}]);