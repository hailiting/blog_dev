(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{496:function(t,a,s){"use strict";s.r(a);var e=s(44),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"java-基础之常用关键词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-基础之常用关键词"}},[t._v("#")]),t._v(" JAVA 基础之常用关键词")]),t._v(" "),s("h2",{attrs:{id:"标识符-identifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标识符-identifier"}},[t._v("#")]),t._v(" 标识符 （identifier）")]),t._v(" "),s("p",[t._v("类的名字等")]),t._v(" "),s("ul",[s("li",[t._v("标识符由字母、数字、下划线“_”、汉字、美元符号“$”组成，第一个字符不能是数字。")]),t._v(" "),s("li",[t._v("不能把 Java 关键字和保留字作为标识符")]),t._v(" "),s("li",[t._v("标识符没有长度限制")]),t._v(" "),s("li",[t._v("标识符对大小写敏感")])]),t._v(" "),s("h2",{attrs:{id:"关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abstract, boolean, break, byte, case, catch,\nchar, class, continue, default, do, double,\nelse, extends, false, final, finally, float,\nfor, if, implements, import, native, int,\ninterface, long, instanceof, new, null, package,\nprivate, protected, public, return, short, static,\nsuper, switch, synchronized, this, throw, throws,\ntransient, true, try, void, volatile, while\n")])])]),s("h3",{attrs:{id:"abstract-关键字解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#abstract-关键字解析"}},[t._v("#")]),t._v(" abstract 关键字解析")]),t._v(" "),s("h4",{attrs:{id:"用-abstract-修饰的类-即抽象类-用-abstract-修饰的方法-即抽象方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用-abstract-修饰的类-即抽象类-用-abstract-修饰的方法-即抽象方法"}},[t._v("#")]),t._v(" 用 abstract 修饰的类，即抽象类，用 abstract 修饰的方法，即抽象方法")]),t._v(" "),s("p",[t._v("何为抽象，就是知道存在，但不确定具体是什么。定义成抽象类的目的，就是为了在子类中实现抽象类【不实现会出错】。")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public abstract class Animal {\n  String name;\n  int agel\n  public static void name(){};\n  public static void age(){};\n  /**\n  * 不确定会不会叫\n  */\n  public abstract void cry();\n}\nclass cat extends Animal {\n  // 抽象方法的实现\n  public void cry(){\n    System.out.println("狗在叫");\n  }\n}\n')])])]),s("h4",{attrs:{id:"抽象方法不能有主体"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抽象方法不能有主体"}},[t._v("#")]),t._v(" 抽象方法不能有主体")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("abstract void xxx();\n")])])]),s("ul",[s("li",[t._v("抽象类不能被实例化。抽象类中方法未具体化，是一种不完整的类，所以直接实例化是没有意义的。")]),t._v(" "),s("li",[t._v("抽象类不一定包含 abstrace 方法。")]),t._v(" "),s("li",[t._v("一旦类中包含 abstract 方法，那类就必须声明为 abstract 类，且该类不能用来创建对象。")]),t._v(" "),s("li",[t._v("如果一个类继承于一个抽象类，或把子类也定义为 abstract 类")]),t._v(" "),s("li",[t._v("抽象类可以提供成员方法的实现细节，抽象类的成员变量可以是各种类型的")]),t._v(" "),s("li",[t._v("抽象方法必须为 public 或 protected")]),t._v(" "),s("li",[t._v("他是一种模板式的设计")])]),t._v(" "),s("h3",{attrs:{id:"continus、break-关键字的用法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#continus、break-关键字的用法"}},[t._v("#")]),t._v(" continus、break 关键字的用法")]),t._v(" "),s("h4",{attrs:{id:"明确两个概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#明确两个概念"}},[t._v("#")]),t._v(" 明确两个概念")]),t._v(" "),s("ul",[s("li",[t._v("循环：按照规定次数重复执行某一操作的全过程；其关键字语句有 for、foreach、while、do、while")]),t._v(" "),s("li",[t._v("迭代：指循环过程中单次操作，1 次循环由 n 次迭代构成")])]),t._v(" "),s("h4",{attrs:{id:"用法归纳"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#用法归纳"}},[t._v("#")]),t._v(" 用法归纳")]),t._v(" "),s("ul",[s("li",[t._v("break 跳出当前循环，并结束此次循环")]),t._v(" "),s("li",[t._v("continue 停止当前迭代，并回到此次循环的开始位置，继续下一次迭代")]),t._v(" "),s("li",[t._v("break label 中断所有迭代，并回到 label 处，结束当前正在执行的所有循环（内外循环均终止）")]),t._v(" "),s("li",[t._v("continue label 中断所有迭代，回到 label 处，从外循环重新开始下一次循环")])]),t._v(" "),s("h4",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('public class LabeledFor {\n  public static void main(String[] args){\n    int i=0;\n    outer:\n      for(; i<10; i++){\n        System.out.println("i="+i);\n        if(2==i){\n          System.out.println("continue");\n          continue;\n        }\n        if(3==i){\n          System.out.println("break");\n          break;\n        }\n        if(7==i){\n          System.out.println("continue inner");\n          i++;\n          continue outer;\n        }\n        if(8==i){\n          System.out.println("break outer");\n          break outer;\n        }\n      }\n  }\n}\n')])])]),s("h3",{attrs:{id:"byte"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#byte"}},[t._v("#")]),t._v(" byte")]),t._v(" "),s("h2",{attrs:{id:"变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[t._v("#")]),t._v(" 变量")]),t._v(" "),s("h2",{attrs:{id:"数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[t._v("#")]),t._v(" 数据类型")]),t._v(" "),s("h2",{attrs:{id:"类型转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),s("h2",{attrs:{id:"常量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[t._v("#")]),t._v(" 常量")])])}),[],!1,null,null,null);a.default=r.exports}}]);