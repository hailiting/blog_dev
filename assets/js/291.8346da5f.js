(window.webpackJsonp=window.webpackJsonp||[]).push([[291],{712:function(t,a,v){"use strict";v.r(a);var e=v(44),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"说一下事件循环机制【event-loop】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#说一下事件循环机制【event-loop】"}},[t._v("#")]),t._v(" 说一下事件循环机制【Event Loop】")]),t._v(" "),v("h2",{attrs:{id:"往期回顾"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#往期回顾"}},[t._v("#")]),t._v(" 往期回顾")]),t._v(" "),v("h3",{attrs:{id:"webpack-做了哪些优化-在开发效率方面和打包策略方面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-做了哪些优化-在开发效率方面和打包策略方面"}},[t._v("#")]),t._v(" webpack 做了哪些优化，在开发效率方面和打包策略方面")]),t._v(" "),v("h2",{attrs:{id:"今日解题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#今日解题"}},[t._v("#")]),t._v(" 今日解题")]),t._v(" "),v("p",[t._v("JavaScript 是单线程的，单线程是指 js 引擎中解析和执行 js 代码的线程只有一个（主线程），在执行 ajax 请求中，主线程在等待响应的过程中会去做其他事情，浏览器先在事件表注册 ajax 的回调函数，响应回来后回调函数会被添加到任务队列中等待执行，不会造成线程阻塞，所以实现了 js 处理 ajax 请求的方式是异步的。"),v("br"),t._v("\nJavaScript 的任务分为两种："),v("strong",[t._v("同步")]),t._v("和"),v("strong",[t._v("异步")]),t._v("，他们的处理方式各自不同：")]),t._v(" "),v("ul",[v("li",[t._v("同步任务是直接放在主线程上排队依次执行，")]),t._v(" "),v("li",[t._v("异步是放在"),v("strong",[t._v("任务队列")]),t._v("中，若有多个异步任务，则需要在任务列表中排队等待，任务队列类似于缓冲区，任务下一步会被移到调用栈然后主线程执行调用栈任务。\n"),v("blockquote",[v("p",[v("strong",[t._v("调用栈")]),t._v("：调用栈是一个栈结构，函数调用会形成一个栈帧，帧中包含了当前执行函数的参数和局部变量等上下文信息，函数执行完后，它的执行上下文会从栈中弹出。")])])])]),t._v(" "),v("h3",{attrs:{id:"浏览器中的event-loop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的event-loop"}},[t._v("#")]),t._v(" 浏览器中的"),v("code",[t._v("Event Loop")])]),t._v(" "),v("h5",{attrs:{id:"micro-task【微任务】与macro-task【宏任务】"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#micro-task【微任务】与macro-task【宏任务】"}},[t._v("#")]),t._v(" "),v("code",[t._v("Micro-Task")]),t._v("【微任务】与"),v("code",[t._v("Macro-Task")]),t._v("【宏任务】")]),t._v(" "),v("p",[t._v("浏览器端事件循环中的异步队列有两种："),v("code",[t._v("macro")]),t._v("和"),v("code",[t._v("micro")]),t._v(".")]),t._v(" "),v("ul",[v("li",[t._v("常见的"),v("code",[t._v("Macro-Task")]),t._v(": "),v("code",[t._v("setTimeout")]),t._v("、"),v("code",[t._v("script(整体)")]),t._v("、"),v("code",[t._v("I/O操作")]),t._v("、"),v("code",[t._v("UI渲染")]),t._v("等")]),t._v(" "),v("li",[t._v("常见的"),v("code",[t._v("Micro-Task")]),t._v(": "),v("code",[t._v("new Promise().then(回调)")]),t._v("、"),v("code",[t._v("MutationObserve")]),t._v("等")]),t._v(" "),v("li",[t._v("浏览器会在当前执行栈执行完毕时立刻先 处理所有微任务队列中的事件，然后在去宏任务中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);