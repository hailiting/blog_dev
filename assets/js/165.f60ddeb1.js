(window.webpackJsonp=window.webpackJsonp||[]).push([[165],{571:function(e,a,n){"use strict";n.r(a);var t=n(44),s=Object(t.a)({},(function(){var e=this,a=e.$createElement,n=e._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"tp5-validate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#tp5-validate"}},[e._v("#")]),e._v(" TP5_validate")]),e._v(" "),n("h2",{attrs:{id:"独立验证"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#独立验证"}},[e._v("#")]),e._v(" 独立验证")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('$date=[\n  "name"=> "vendor12111111",\n  "email"=>  "vendor@11s",\n];\n$validate=new Validate([\n  "name"=>"require|max:10",\n  "email"=>"email"\n]);\n// check($date) 认证 返回来是字符串\n// batch()->check($date) 批量认证 返回来是数组\n$result=$validate->batch()->check($date);\necho $result;\nvar_dump($validate->getError());\n')])])]),n("h2",{attrs:{id:"验证器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#验证器"}},[e._v("#")]),e._v(" 验证器")]),e._v(" "),n("p",[e._v("对 validate 做更好的封装\n"),n("code",[e._v("app\\api\\validate")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?php\n  namespace app\\api\\validate;\n\n  use think\\Validate;\n\n  class TestValidate extends Validate{\n    protected $rule = [\n      "name" => "require|max:10",\n      "email" => "email"\n    ];\n  }\n')])])]),n("p",[n("code",[e._v("app\\api\\controller\\v1")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?php\n  // 表与表的关系 （一对多 。。。）\n  namespace app\\api\\controller\\v1;\n\n  use app\\api\\validate\\TestValidate;\n\n  use think\\Validate;\n\n  class Banner{\n    /**\n     * 获取指定id的banner信息\n     * @url /banner/:id\n     * @http GET\n     * @id banner的id号\n     */\n    public function getBanner($id){\n      $date=[\n        "name"=> "vendor12111111",\n        "email"=>  "vendor@11s",\n      ];\n      $validate = new TestValidate();\n      // check方法是挂载在TestValidate的验证规则\n      // check($date) 认证 返回来是字符串\n      // batch()->check($date) 批量认证 返回来是数组\n      $result=$validate->batch()->check($date);\n      echo $result;\n      var_dump($validate->getError());\n    }\n    public  function Test(){\n      phpinfo();\n    }\n  }\n\n')])])]),n("h3",{attrs:{id:"实战"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实战"}},[e._v("#")]),e._v(" 实战")]),e._v(" "),n("p",[e._v("大概思路\n1，应用层：controller 下单 modal 调用方法，验证是否成功;\n2，中间层：填充验证规则到 基本验证框架里(挂载到基础层上);\n3，基础层：除 check 的规则，其他外层在此完成，只需抛出 true 或错误;")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// banner.php\n$validate = (new IDMustBePositiveInt())->goCheck();\necho $validate;\n// IDMustBePositiveInt.php\nclass IDMustBePositiveInt extends BaseValidate{\n  protected $rule = [\n    "id" => "require|isPositiveInteger",\n  ];\n  // 自定义验证规则\n  protected function isPositiveInteger(\n    $value,\n    $rule="",\n    $data="",\n    $field=""\n  ){\n    // 判断value是否是正整数\n    if(is_numeric($value) && is_int($value+0) && ($value+0)>0){\n      return true;\n    }\n    return false;\n  }\n}\n// BaseValidate.php\nclass BaseValidate extends Validate{\n  public function goCheck(){\n    // 获取HTTP传入的参数\n    // 对这些参数做检查\n    $request = Request::instance();\n    $params = $request->param();\n    $result = $this->check($params);\n    if(!$result){\n      $error = $this->error;\n      throw new Exception($error);\n    } else{\n      return true;\n    }\n  }\n}\n')])])])])}),[],!1,null,null,null);a.default=s.exports}}]);