(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{666:function(n,e,a){"use strict";a.r(e);var s=a(44),t=Object(s.a)({},(function(){var n=this,e=n.$createElement,a=n._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"manifest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#manifest"}},[n._v("#")]),n._v(" Manifest")]),n._v(" "),a("h2",{attrs:{id:"不同情况-不同含义的-manifest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同情况-不同含义的-manifest"}},[n._v("#")]),n._v(" 不同情况，不同含义的 Manifest")]),n._v(" "),a("ul",[a("li",[n._v("html 标签的 manifest 属性：离线缓存（目前已废弃）;")]),n._v(" "),a("li",[n._v("PWA: 将 Web 应用程序安装到设备的主屏幕上;")]),n._v(" "),a("li",[n._v("webpack 中 webpack-manifest-plugin 插件打包出来的 manifest.json 文件，用来生成一份资源清单，为后端渲染服务;")]),n._v(" "),a("li",[n._v("webpack 中 DLL 打包时，输出的 manifest.json 文件，用来分析已经打包过的文件，优化打包速度和大小；")]),n._v(" "),a("li",[n._v("webpack 中 manifest 运行时的代码")])]),n._v(" "),a("h2",{attrs:{id:"html-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-属性"}},[n._v("#")]),n._v(" html 属性")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<!DOCTYPE html>\n<html lang="en" manifest="/tc.mymanifest">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>Document</title>\n    <link rel="stylesheet" href="/theme.css">\n    <script src="/main.js"><\/script>\n    <script src="/mai2.js"><\/script>\n  </head>\n</html>\n// 缓存清单可以是任意后缀名，不过必须制定content-type属性为text/cache-manifest\n// tc.mymanifest\n# v1 这是注释\nCACHE MANIFEST // 指定需要缓存的文件，第一次下载完成以后，文件都不会在从网络请求了，除非tc.mymanifest更新，标记了manifest的html本身也会被缓存\n/theme.css\n/main.js\n\nNETWORK:  // 指定非缓存文，所有类似资源的请求都会绕过缓存，即使用户处于离线也不会读缓存\n*\n\nFALLBack:  // 指定了一个后备页面，当资源无法访问时，浏览器会使用这个页面\n/html5/ /404.html   // 比如离线访问/html5/目录时，就会用本地的/404.html页\n\n\n// js监听更新事件，重新加载页面\nwindow.addEventListener("load", function(e){\n  window.applicationCache.addEventtListener("updateready", function(e){\n    if(window.applicationCache.status == window.applicationCache.UPDATEREADY){\n      // 更新缓存，重新加载\n      window.applicationCache.swapCache();\n      window.location.reload();\n    }\n  })\n})\n')])])]),a("h2",{attrs:{id:"pwa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pwa"}},[n._v("#")]),n._v(" PWA")]),n._v(" "),a("p",[n._v("为了实现 PWA 应用添加至桌面的功能，除了要求站点支持 HTTPS 外，还需要准备 manifest.json 文件去配置应用的图标、名称等信息")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<link rel="manifest" href="/manifest.json">\n\n// manifest.json\n{\n  "name": "Minimal PWA",\n  "short_name": "PWA Demo",\n  "display": "standalone",\n  "start_url": "/",\n  "theme_color": "#313131",\n  "background_color": "#313131",\n  "icons": [\n    {\n      "src": "images/touch/homescreen48.png",\n      "sizes": "48x48",\n      "type": "image/png",\n    }\n  ]\n}\n')])])]),a("h2",{attrs:{id:"基于-webpack-的-react-开发环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-webpack-的-react-开发环境"}},[n._v("#")]),n._v(" 基于 webpack 的 react 开发环境")]),n._v(" "),a("h3",{attrs:{id:"搭建-webpack-项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建-webpack-项目"}},[n._v("#")]),n._v(" 搭建 webpack 项目")]),n._v(" "),a("p",[n._v("安装依赖")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm init -y\nnpm install @babel/polyfill react react-dom --save\n\n\nnpm install webpack webpack-cli webpack-dev-server @babel/core @babel/preset-env @babel/preset-react add-asset-html-webpack-plugin autoprefixer babel-loader clean-webpack-plugin css-loader html-webpack-plugin mini-css-extract-plugin node-sass postcss-loader sass-loader style-loader --save-dev\n")])])]),a("p",[n._v("新建"),a("code",[n._v(".babelrc")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{\n  "presets": [\n    [\n      "@babel/preset-env",\n      {\n        "useBuiltIns": "usage", // 根据browserlist填写浏览器，自动添加polyfill\n        "corejs": 2,\n      }\n    ],\n    "@babel/preset-react" // 编译react\n  ],\n  "plugins": []\n}\n')])])]),a("p",[n._v("新建 postcss.config.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('module.exports = {\n  plugins: [\n    require("autoprefixer") // 根据browserslist填写浏览器，自动添加css前缀\n  ]\n}\n')])])]),a("p",[n._v("新建.browserslistrc")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("last 10 versions\nie >= 11\nios >= 9\nandroid >= 6\n")])])]),a("p",[n._v("新建 webpack.dev.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('const path = require("path");\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\n\nmodule.exports = {\n  mode: "development",\n  devtool: "cheap-module-eval-source-map",\n  entry: {\n    main: "./src/index.js",\n  },\n  output: {\n    path: path.resolve(__dirname, "./dist"),\n    filename: "[name].js",\n    chunkFilename: "[name].chunk.js",\n  },\n  devServer: {\n    historyApiFallback: true,\n    overlay: true,\n    port: 9001,\n    open: true,\n    hot: true,\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: "babel-loader",\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          "style-loader",\n          "css-loader",\n          "postcss-loader"\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          "style-loader",\n          {\n            loader: "css-loader",\n            options: {\n              modules: false,\n              importLoaders: 2,\n            }\n          },\n          "sass-loader",\n          "postcss-loader"\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: "./src/index.html"}), // index打包模板\n  ]\n}\n')])])]),a("p",[n._v("新建 src 目录，并新建 src/index.html")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width,initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>learn dll</title>\n  </head>\n  <body>\n    <div id="app"></div>\n  </body>\n</html>\n')])])]),a("p",[n._v("新建 src/home.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import React from "react";\nimport "./Home.scss";\nexport default ()=> <div className="home">home</div>\n')])])]),a("p",[n._v("新建 src/Home.scss")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v(".home{\n  color: red;\n}\n")])])]),a("p",[n._v("src/index.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('import React,{Component} from "react";\nimport ReactDom from "react-dom";\nimport Home from "./Home";\nclass Demo extends Component{\n  render(){\n    return <Home/>\n  }\n}\nReactDom.render(<Demo/>,document.getElementById("app"));\n')])])]),a("p",[n._v("修改 package.json")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// npm start\n"scripts": {\n  "start": "webpack-dev-server --config webpack.dev.js"\n}\n')])])]),a("p",[n._v("新建 webpack.prod.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('const path = require("path");\nconst { CleanWebpackPlugin } = require("clean-webpack-plugin");\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\nconst MiniCssExtractPlugin = require("mini-css-extract-plugin");\nconst ManifestPlugin = require("webpack-manifest-plugin");\n\nmodule.exports = {\n  mode: "production",\n  entry: {\n    main: "./src/index.js"\n  },\n  output: {\n    path: path.resolve(__dirname, "./dist"),\n    filename: "[name].[contenthash:8].js",\n    chunkFilename: "[name].[contenthash:8].chunk.js",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: "babel-loader",\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          "css-loader",\n          "postcss-loader"\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: "css-loader",\n            options: {\n              modules: false,\n              importLoaders: 2,\n            }\n          },\n          "sass-loader",\n          "postcss-loader"\n        ]\n      }\n    ]\n  },\n  // 代码分割\n  plugins: [\n    new HtmlWebpackPlugin({ template: "./src/index.html" }),\n    new MiniCssExtractPlugin({\n      filename: "[name].[contenthash:8].css",\n      chukFilename: "[id].[contenthash:8].css",\n    }),\n    new CleanWebpackPlugin(),\n    new ManifestPlugin(),\n  ],\n  optimization: {\n    splitChunks: {\n      chunks: "all"\n    }\n  }\n}\n')])])]),a("p",[n._v("package.json")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('"build": "webpack --config webpack.prod.js"\n')])])]),a("h3",{attrs:{id:"webpack-manifest-plugin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-manifest-plugin"}},[n._v("#")]),n._v(" webpack-manifest-plugin")]),n._v(" "),a("p",[n._v("生成打包后的清单，对应打包后文件的真正路径")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("npm i webpack-manifest-plugin -D\n")])])]),a("p",[n._v("修改 webpack.prod.js")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('const ManifestPlugin = require("webpack-manifest-plugin");\nmodule.exports = {\n  // ...\n  plugins: [\n    new ManifestPlugin()\n  ]\n}\n')])])]),a("p",[n._v("dist 目录会生成一个 manifest.json")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('{\n  "main.css": "main.198b3634.css",\n  "main.js": "main.d312f172.js",\n  "index.html": "index.html"\n}\n')])])]),a("p",[n._v("比如在 SSR 开发时，前端打包后，node 后端可以通过这个 json 数据，返回正确的资源路径的 html 模板")]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('const buildPath = require("./dist/manifest.json");\nres.send(`\n  <!DOCTYPE html>\n  <html lang="en">\n    <head>\n      <meta charset="UTF-8">\n      <meta name="viewport" content="width=device-width,initial-scale=1.0">\n      <meta http-equiv="X-UA-Compatible" content=ie-edge">\n      <title>ssr</title>\n      <link href="${buildPath[\'main.css\']}" rel="stylesheet">\n    </head>\n    <body>\n      <div id="app"></div>\n      <script type="text/javasript" src="${buildPath["main.js]}"><\/script>\n    </body>\n  </html>\n`)\n')])])]),a("h3",{attrs:{id:"dll-打包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dll-打包"}},[n._v("#")]),n._v(" Dll 打包")]),n._v(" "),a("p",[n._v("目的是提升打包速度：在第一次构建 vendor.js 以后，下次打包，就直接跳过那些被打包到 vendor.js 里的代码，从而提升打包速度。\ndll 打包原理：")]),n._v(" "),a("ol",[a("li",[n._v("把指定的库代码打包到一个 dll.js，同时生成一份对应的 manifest.json 文件。")]),n._v(" "),a("li",[n._v("webpack 打包时，读取 manifest.json，知道哪些代码可以直接忽略，从而提高构建速度")])]),n._v(" "),a("ul",[a("li",[n._v("新建一个 webpack.dll.js")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// "build:dll": "webpack --config webpack.dll.js",\nconst path = require("path");\nconst webpack = require("webpack");\nconst {CleanWebpackPlugin} = require("clean-webpack-plugin");\nmodule.exports = {\n  mode: "production",\n  entry: {\n    vendors: ["react", "react-dom"] // 手动指定哪些库\n  },\n  output: {\n    filename: "[name].[hash:8].dll.js",\n    path: path.resolve(__dirname, "./dll"),\n    library: "[name]"\n  },\n  plugins: [\n    new CleanWebpackPlugin(),\n    new webpack.DllPlugin({\n      path: path.join(__dirname, "./dll/[name].manifest.json"), // 生成对应的manifest.json，给webpack打包用\n      name: "[name]",\n    })\n  ]\n}\n')])])]),a("ul",[a("li",[n._v("修改 webpack.prod.js【同时 npm i add-asset-html-webpack-plugin -D】")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('const path = require("path");\nconst {CleanWebpackPlugin} = require("clean-webpack-plugin");\nconst HtmlWebpackPlugin = require("html-webpack-plugin");\nconst MiniCssExtractPlugin = require("mini-css-extract-plugin");\nconst ManifestPlugin = require("webpack-manifest-plugin");\nconst webpack = require("webpack");\nconst AddAssetHtmlPlugin = require("add-asset-html-webpack-plugin");\n\nmodule.exports = {\n  mode: "production",\n  entry: {\n    main: "./src/index.js",\n  },\n  output: {\n    path: path.resolve(__dirname, "./dist"),\n    filename: "[name].[contenthash:8].js",\n    chunkFilename: "[name].[contenthash:8].chunk.js",\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        loader: "babel-loader",\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          "css-loader",\n          "postcss-loader",\n        ]\n      },\n      {\n        test: /\\.scss$/,\n        use: [\n          MiniCssExtractPlugin.loader,\n          {\n            loader: "css-loader",\n            options: {\n              modules: false,\n              importLoaders: 2,\n            }\n          },\n          "sass-loader",\n          "postcss-loader"\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({template: "./src/index.html"}),\n    new AddAssetHtmlPlugin({filepath: path.resolve(__dirname,"./dll/*.dll.js")}), // 把dll.js加到index.html里，并拷贝文件到dist目录\n    new MiniCssExtractPlugin({\n      filename: "[name].[contenthash:8].css",\n      chunkFilename: "[id].[contenthash:8].css",\n    }),\n    new webpack.DllReferencePlugin({\n      manifest: path.resolve(__dirname, "./dll/vendors.manifest.json") // 读取dll打包后的manifest.json，分析哪些代码跳过\n    }),\n    new CleanWebpackPlugin(),\n    new ManifestPlugin(),\n  ],\n  optimization: {\n    splitChunks: {\n      chunks: "all",\n    }\n  }\n}\n')])])]),a("h2",{attrs:{id:"runtime"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#runtime"}},[n._v("#")]),n._v(" runtime")]),n._v(" "),a("p",[n._v("webpack 中有运行时的概念，比如我们跳过 webpack 打包分割成 dll.js, vendors.js,main.js，这三个代码调用的先后顺序是由运行时代码组织（通过读取 manifest 数据）。")]),n._v(" "),a("ul",[a("li",[n._v("为优化缓存，可以把运行时代码单独提取出来，这样某些文件发生改变后，一些与之相关的文件 hash 值并不会随之改变。")])]),n._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 通过配置runtimeChunk实现\noptimization: {\n  runtimeChunk: {name:"manifest"},\n}\n')])])])])}),[],!1,null,null,null);e.default=t.exports}}]);